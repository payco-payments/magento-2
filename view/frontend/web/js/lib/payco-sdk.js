/*! For license information please see bundle.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.SDK=t():e.SDK=t()}(self,(()=>(()=>{"use strict";var e={748:(e,t,r)=>{r.r(t),r.d(t,{cnpj:()=>m,cpf:()=>u,default:()=>g,validator:()=>w});const n=["00000000000","11111111111","22222222222","33333333333","44444444444","55555555555","66666666666","77777777777","88888888888","99999999999","12345678909"],s=/[.-]/g,i=/[^\d]/g,a=e=>{const t=e.split("").map((e=>parseInt(e,10))),r=t.length+1,n=t.map(((e,t)=>e*(r-t))).reduce(((e,t)=>e+t))%11;return n<2?0:11-n},o=(e,t)=>{const r=t?s:i;return(e||"").replace(r,"")},c=e=>o(e).replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/,"$1.$2.$3-$4");var u={verifierDigit:a,strip:o,format:c,isValid:(e,t)=>{const r=o(e,t);if(!r)return!1;if(11!==r.length)return!1;if(n.includes(r))return!1;let s=r.substr(0,9);return s+=a(s),s+=a(s),s.substr(-2)===r.substr(-2)},generate:e=>{let t="";for(let e=0;e<9;e+=1)t+=Math.floor(9*Math.random());return t+=a(t),t+=a(t),e?c(t):t}};const p=["00000000000000","11111111111111","22222222222222","33333333333333","44444444444444","55555555555555","66666666666666","77777777777777","88888888888888","99999999999999"],l=/[-\\/.]/g,d=/[^\d]/g,h=e=>{let t=2;const r=e.split("").reduce(((e,t)=>[parseInt(t,10)].concat(e)),[]).reduce(((e,r)=>(e+=r*t,t=9===t?2:t+1,e)),0)%11;return r<2?0:11-r},f=(e,t)=>{const r=t?l:d;return(e||"").replace(r,"")},y=e=>f(e).replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/,"$1.$2.$3/$4-$5");var m={verifierDigit:h,strip:f,format:y,isValid:(e,t)=>{const r=f(e,t);if(!r)return!1;if(14!==r.length)return!1;if(p.includes(r))return!1;let n=r.substr(0,12);return n+=h(n),n+=h(n),n.substr(-2)===r.substr(-2)},generate:e=>{let t="";for(let e=0;e<12;e+=1)t+=Math.floor(9*Math.random());return t+=h(t),t+=h(t),e?y(t):t}};const w=e=>({type:"document",base:e.string(),messages:{"document.cpf":"CPF inválido","document.cnpj":"CNPJ inválido"},rules:{cpf:{validate:(e,t,r,n)=>u.isValid(e)?e:t.error("document.cpf")},cnpj:{validate:(e,t,r,n)=>m.isValid(e)?e:t.error("document.cnpj")}}}),g=w},343:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function o(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(o){return function(c){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,o[0]&&(a=0)),a;)try{if(r=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((s=(s=a.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){a.label=o[1];break}if(6===o[0]&&a.label<s[1]){a.label=s[1],s=o;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(o);break}s[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.encryptCardData=void 0;var i=r(894);t.encryptCardData=function(e){var t=e.card,r=e.publicKey,a=e.keyId,o=e.verifyCard;return n(this,void 0,void 0,(function(){var e,n;return s(this,(function(s){switch(s.label){case 0:return e=(new TextEncoder).encode(JSON.stringify({card_number:t.number,brand:t.cardBrand,card_holder_name:t.holderName,expiration_month:t.expirationMonth,expiration_year:t.expirationYear,verify_card:o,security_code:t.cvv})),[4,(0,i.importSPKI)("-----BEGIN PUBLIC KEY-----\n".concat(r,"\n-----END PUBLIC KEY-----"),"RSA-OAEP-256")];case 1:return n=s.sent(),[4,new i.CompactEncrypt(e).setProtectedHeader({alg:"RSA-OAEP-256",enc:"A256GCM",kid:a}).encrypt(n)];case 2:return[2,{encryptedCard:s.sent()}]}}))}))}},762:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getDeviceInfo=void 0,t.getDeviceInfo=function(){return{http_accept_brower_value:navigator.userAgent,http_accept_content:navigator.accept,http_browser_language:navigator.language,http_browser_java_enabled:(null===navigator||void 0===navigator?void 0:navigator.javaEnabled())||!1,http_browser_javascript_enabled:!0,http_browser_color_depth:window.screen.colorDepth,http_browser_screen_height:window.screen.height,http_browser_screen_width:window.screen.width,http_browser_time_difference:(new Date).getTimezoneOffset().toString(),user_agent_browser_value:navigator.userAgent}}},420:function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function o(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var r,n,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(o){return function(c){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,o[0]&&(a=0)),a;)try{if(r=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((s=(s=a.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){a.label=o[1];break}if(6===o[0]&&a.label<s[1]){a.label=s[1],s=o;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(o);break}s[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.getPublicKey=void 0,t.getPublicKey=function(e){var t=e.keyId,s=e.client;return r(this,void 0,void 0,(function(){var e;return n(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,s.get("api/v1/payments/card/public_key/".concat(t))];case 1:return[2,{publicKey:r.sent().data.public_key}];case 2:throw e=r.sent(),console.error("Error getting public key",e),e;case 3:return[2]}}))}))}},624:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.installScripts=void 0,t.installScripts=function(e){var t=e.orgId,r=e.sessionId,n=null!=r?r:window.crypto.randomUUID(),s=document.head,i='<script type="text/javascript" src="https://h.online-metrix.net/fp/tags.js?org_id='.concat(t,"&session_id=adiq_br").concat(n,'"><\/script>');s.insertAdjacentHTML("beforeend",i);var a=document.body,o='<noscript><iframe style="width: 100px; height: 100px; border: 0; position:absolute; top: -5000px;" src="https://h.online-metrix.net/fp/tags.js?org_id='.concat(t,"&session_id=adiq_br").concat(n,'"></iframe>></noscript>');return a.insertAdjacentHTML("beforeend",o),n}},329:function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function o(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))},n=this&&this.__generator||function(e,t){var r,n,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(o){return function(c){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,o[0]&&(a=0)),a;)try{if(r=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((s=(s=a.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){a.label=o[1];break}if(6===o[0]&&a.label<s[1]){a.label=s[1],s=o;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(o);break}s[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.tokenizeCardData=void 0,t.tokenizeCardData=function(e){var t=e.encryptedCard,s=e.client;return r(this,void 0,void 0,(function(){return n(this,(function(e){switch(e.label){case 0:return e.trys.push([0,2,,3]),[4,s.post("/api/v1/payments/card/token",{token:t})];case 1:return[2,{token:e.sent().data.card_vault_token}];case 2:throw e.sent(),new Error("Error trying to tokenize card data");case 3:return[2]}}))}))}},51:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function o(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(o){return function(c){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,o[0]&&(a=0)),a;)try{if(r=1,n&&(s=2&o[0]?n.return:o[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,o[1])).done)return s;switch(n=0,s&&(o=[2&o[0],s.value]),o[0]){case 0:case 1:s=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((s=(s=a.trys).length>0&&s[s.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!s||o[1]>s[0]&&o[1]<s[3])){a.label=o[1];break}if(6===o[0]&&a.label<s[1]){a.label=s[1],s=o;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(o);break}s[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=s=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,c])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.getDeviceInfo=t.tokenize=t.initialize=t.sessionId=t.keyId=t.client=void 0;var i=r(579),a=r(420),o=r(114),c=r(343),u=r(74),p=r(329),l=r(762),d=r(624);t.initialize=function(e){return n(void 0,void 0,void 0,(function(){var r,n;return s(this,(function(s){if(!e.keyId)throw new Error("keyId is required");if(r=e.baseURL||"https://api.payments.payco.com.br/open",t.client=(0,o.createClient)({baseURL:r}),t.keyId=e.keyId,null===(n=e.installScripts)||void 0===n||n)t.sessionId=(0,d.installScripts)({orgId:e.orgId||"k8vif92e",sessionId:e.sessionId});else{if(!e.sessionId)throw new Error("sessionId is required when installScripts is false");t.sessionId=e.sessionId}return[2]}))}))},t.tokenize=function(e){var r=e.cardData,o=e.verifyCard,l=void 0!==o&&o;return n(void 0,void 0,void 0,(function(){var e,n,o;return s(this,(function(s){switch(s.label){case 0:return e=i.parse(u.cardDataSchema,r),[4,(0,a.getPublicKey)({client:t.client,keyId:t.keyId})];case 1:return n=s.sent().publicKey,[4,(0,c.encryptCardData)({card:e,publicKey:n,keyId:t.keyId,verifyCard:l})];case 2:return o=s.sent().encryptedCard,[4,(0,p.tokenizeCardData)({encryptedCard:o,client:t.client})];case 3:return[2,s.sent()]}}))}))},t.getDeviceInfo=function(){return(0,l.getDeviceInfo)()}},114:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createClient=void 0;var n=r(787);t.createClient=function(e){var t=e.baseURL;return n.default.create({baseURL:t})}},74:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.cardDataSchema=t.CardBrand=void 0;var n,s=r(579),i=r(748);!function(e){e.Mastercard="mastercard",e.Visa="visa",e.Amex="amex",e.Hipercard="hipercard",e.Elo="elo"}(n||(t.CardBrand=n={})),t.cardDataSchema=s.object({holderName:s.string([s.regex(/^[a-zA-Z\s]+$/),s.minLength(2)]),holderDocument:s.string([s.custom((function(e){return!(!i.cpf.isValid(e)&&!i.cnpj.isValid(e))}),"invalid document, must be a valid CPF or CNPJ")]),number:s.string([s.regex(/^\d{16}$/),s.custom((function(e){var t=e[0];return!e.split("").every((function(e){return e===t}))}),"invalid card number, must be a valid credit card number")]),cardBrand:s.enum_(n),expirationMonth:s.string([s.regex(/^(0[1-9]|1[0-2])$/)]),expirationYear:s.string([s.regex(/^\d{2}$/)]),cvv:s.string([s.regex(/^\d{3}$/)])})},787:(e,t,r)=>{function n(e,t){return function(){return e.apply(t,arguments)}}const{toString:s}=Object.prototype,{getPrototypeOf:i}=Object,a=(o=Object.create(null),e=>{const t=s.call(e);return o[t]||(o[t]=t.slice(8,-1).toLowerCase())});var o;const c=e=>(e=e.toLowerCase(),t=>a(t)===e),u=e=>t=>typeof t===e,{isArray:p}=Array,l=u("undefined"),d=c("ArrayBuffer"),h=u("string"),f=u("function"),y=u("number"),m=e=>null!==e&&"object"==typeof e,w=e=>{if("object"!==a(e))return!1;const t=i(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},g=c("Date"),b=c("File"),E=c("Blob"),_=c("FileList"),v=c("URLSearchParams");function A(e,t,{allOwnKeys:r=!1}={}){if(null==e)return;let n,s;if("object"!=typeof e&&(e=[e]),p(e))for(n=0,s=e.length;n<s;n++)t.call(null,e[n],n,e);else{const s=r?Object.getOwnPropertyNames(e):Object.keys(e),i=s.length;let a;for(n=0;n<i;n++)a=s[n],t.call(null,e[a],a,e)}}function S(e,t){t=t.toLowerCase();const r=Object.keys(e);let n,s=r.length;for(;s-- >0;)if(n=r[s],t===n.toLowerCase())return n;return null}const k="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:r.g,x=e=>!l(e)&&e!==k,P=(C="undefined"!=typeof Uint8Array&&i(Uint8Array),e=>C&&e instanceof C);var C;const O=c("HTMLFormElement"),H=(({hasOwnProperty:e})=>(t,r)=>e.call(t,r))(Object.prototype),R=c("RegExp"),T=(e,t)=>{const r=Object.getOwnPropertyDescriptors(e),n={};A(r,((r,s)=>{let i;!1!==(i=t(r,s,e))&&(n[s]=i||r)})),Object.defineProperties(e,n)},K="abcdefghijklmnopqrstuvwxyz",j="0123456789",I={DIGIT:j,ALPHA:K,ALPHA_DIGIT:K+K.toUpperCase()+j},D=c("AsyncFunction");var W={isArray:p,isArrayBuffer:d,isBuffer:function(e){return null!==e&&!l(e)&&null!==e.constructor&&!l(e.constructor)&&f(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||f(e.append)&&("formdata"===(t=a(e))||"object"===t&&f(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&d(e.buffer),t},isString:h,isNumber:y,isBoolean:e=>!0===e||!1===e,isObject:m,isPlainObject:w,isUndefined:l,isDate:g,isFile:b,isBlob:E,isRegExp:R,isFunction:f,isStream:e=>m(e)&&f(e.pipe),isURLSearchParams:v,isTypedArray:P,isFileList:_,forEach:A,merge:function e(){const{caseless:t}=x(this)&&this||{},r={},n=(n,s)=>{const i=t&&S(r,s)||s;w(r[i])&&w(n)?r[i]=e(r[i],n):w(n)?r[i]=e({},n):p(n)?r[i]=n.slice():r[i]=n};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&A(arguments[e],n);return r},extend:(e,t,r,{allOwnKeys:s}={})=>(A(t,((t,s)=>{r&&f(t)?e[s]=n(t,r):e[s]=t}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,r,n)=>{e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),r&&Object.assign(e.prototype,r)},toFlatObject:(e,t,r,n)=>{let s,a,o;const c={};if(t=t||{},null==e)return t;do{for(s=Object.getOwnPropertyNames(e),a=s.length;a-- >0;)o=s[a],n&&!n(o,e,t)||c[o]||(t[o]=e[o],c[o]=!0);e=!1!==r&&i(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:c,endsWith:(e,t,r)=>{e=String(e),(void 0===r||r>e.length)&&(r=e.length),r-=t.length;const n=e.indexOf(t,r);return-1!==n&&n===r},toArray:e=>{if(!e)return null;if(p(e))return e;let t=e.length;if(!y(t))return null;const r=new Array(t);for(;t-- >0;)r[t]=e[t];return r},forEachEntry:(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let n;for(;(n=r.next())&&!n.done;){const r=n.value;t.call(e,r[0],r[1])}},matchAll:(e,t)=>{let r;const n=[];for(;null!==(r=e.exec(t));)n.push(r);return n},isHTMLForm:O,hasOwnProperty:H,hasOwnProp:H,reduceDescriptors:T,freezeMethods:e=>{T(e,((t,r)=>{if(f(e)&&-1!==["arguments","caller","callee"].indexOf(r))return!1;const n=e[r];f(n)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")}))}))},toObjectSet:(e,t)=>{const r={},n=e=>{e.forEach((e=>{r[e]=!0}))};return p(e)?n(e):n(String(e).split(t)),r},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,r){return t.toUpperCase()+r})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:S,global:k,isContextDefined:x,ALPHABET:I,generateString:(e=16,t=I.ALPHA_DIGIT)=>{let r="";const{length:n}=t;for(;e--;)r+=t[Math.random()*n|0];return r},isSpecCompliantForm:function(e){return!!(e&&f(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),r=(e,n)=>{if(m(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[n]=e;const s=p(e)?[]:{};return A(e,((e,t)=>{const i=r(e,n+1);!l(i)&&(s[t]=i)})),t[n]=void 0,s}}return e};return r(e,0)},isAsyncFn:D,isThenable:e=>e&&(m(e)||f(e))&&f(e.then)&&f(e.catch)};function U(e,t,r,n,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),s&&(this.response=s)}W.inherits(U,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:W.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const J=U.prototype,N={};function M(e){return W.isPlainObject(e)||W.isArray(e)}function $(e){return W.endsWith(e,"[]")?e.slice(0,-2):e}function q(e,t,r){return e?e.concat(t).map((function(e,t){return e=$(e),!r&&t?"["+e+"]":e})).join(r?".":""):t}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{N[e]={value:e}})),Object.defineProperties(U,N),Object.defineProperty(J,"isAxiosError",{value:!0}),U.from=(e,t,r,n,s,i)=>{const a=Object.create(J);return W.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),U.call(a,e.message,t,r,n,s),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const B=W.toFlatObject(W,{},null,(function(e){return/^is[A-Z]/.test(e)}));function L(e,t,r){if(!W.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const n=(r=W.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!W.isUndefined(t[e])}))).metaTokens,s=r.visitor||u,i=r.dots,a=r.indexes,o=(r.Blob||"undefined"!=typeof Blob&&Blob)&&W.isSpecCompliantForm(t);if(!W.isFunction(s))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(W.isDate(e))return e.toISOString();if(!o&&W.isBlob(e))throw new U("Blob is not supported. Use a Buffer instead.");return W.isArrayBuffer(e)||W.isTypedArray(e)?o&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function u(e,r,s){let o=e;if(e&&!s&&"object"==typeof e)if(W.endsWith(r,"{}"))r=n?r:r.slice(0,-2),e=JSON.stringify(e);else if(W.isArray(e)&&function(e){return W.isArray(e)&&!e.some(M)}(e)||(W.isFileList(e)||W.endsWith(r,"[]"))&&(o=W.toArray(e)))return r=$(r),o.forEach((function(e,n){!W.isUndefined(e)&&null!==e&&t.append(!0===a?q([r],n,i):null===a?r:r+"[]",c(e))})),!1;return!!M(e)||(t.append(q(s,r,i),c(e)),!1)}const p=[],l=Object.assign(B,{defaultVisitor:u,convertValue:c,isVisitable:M});if(!W.isObject(e))throw new TypeError("data must be an object");return function e(r,n){if(!W.isUndefined(r)){if(-1!==p.indexOf(r))throw Error("Circular reference detected in "+n.join("."));p.push(r),W.forEach(r,(function(r,i){!0===(!(W.isUndefined(r)||null===r)&&s.call(t,r,W.isString(i)?i.trim():i,n,l))&&e(r,n?n.concat(i):[i])})),p.pop()}}(e),t}function F(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function G(e,t){this._pairs=[],e&&L(e,this,t)}const z=G.prototype;function V(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function X(e,t,r){if(!t)return e;const n=r&&r.encode||V,s=r&&r.serialize;let i;if(i=s?s(t,r):W.isURLSearchParams(t)?t.toString():new G(t,r).toString(n),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}z.append=function(e,t){this._pairs.push([e,t])},z.toString=function(e){const t=e?function(t){return e.call(this,t,F)}:F;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};var Y=class{constructor(){this.handlers=[]}use(e,t,r){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){W.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},Z={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Q={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:G,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const ee="undefined"!=typeof window&&"undefined"!=typeof document,te=(re="undefined"!=typeof navigator&&navigator.product,ee&&["ReactNative","NativeScript","NS"].indexOf(re)<0);var re;const ne="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts;var se={...Object.freeze({__proto__:null,hasBrowserEnv:ee,hasStandardBrowserWebWorkerEnv:ne,hasStandardBrowserEnv:te}),...Q};function ie(e){function t(e,r,n,s){let i=e[s++];if("__proto__"===i)return!0;const a=Number.isFinite(+i),o=s>=e.length;return i=!i&&W.isArray(n)?n.length:i,o?(W.hasOwnProp(n,i)?n[i]=[n[i],r]:n[i]=r,!a):(n[i]&&W.isObject(n[i])||(n[i]=[]),t(e,r,n[i],s)&&W.isArray(n[i])&&(n[i]=function(e){const t={},r=Object.keys(e);let n;const s=r.length;let i;for(n=0;n<s;n++)i=r[n],t[i]=e[i];return t}(n[i])),!a)}if(W.isFormData(e)&&W.isFunction(e.entries)){const r={};return W.forEachEntry(e,((e,n)=>{t(function(e){return W.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),n,r,0)})),r}return null}const ae={transitional:Z,adapter:["xhr","http"],transformRequest:[function(e,t){const r=t.getContentType()||"",n=r.indexOf("application/json")>-1,s=W.isObject(e);if(s&&W.isHTMLForm(e)&&(e=new FormData(e)),W.isFormData(e))return n?JSON.stringify(ie(e)):e;if(W.isArrayBuffer(e)||W.isBuffer(e)||W.isStream(e)||W.isFile(e)||W.isBlob(e))return e;if(W.isArrayBufferView(e))return e.buffer;if(W.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(s){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return L(e,new se.classes.URLSearchParams,Object.assign({visitor:function(e,t,r,n){return se.isNode&&W.isBuffer(e)?(this.append(t,e.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=W.isFileList(e))||r.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return L(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return s||n?(t.setContentType("application/json",!1),function(e,t,r){if(W.isString(e))try{return(0,JSON.parse)(e),W.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||ae.transitional,r=t&&t.forcedJSONParsing,n="json"===this.responseType;if(e&&W.isString(e)&&(r&&!this.responseType||n)){const r=!(t&&t.silentJSONParsing)&&n;try{return JSON.parse(e)}catch(e){if(r){if("SyntaxError"===e.name)throw U.from(e,U.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:se.classes.FormData,Blob:se.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};W.forEach(["delete","get","head","post","put","patch"],(e=>{ae.headers[e]={}}));var oe=ae;const ce=W.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),ue=Symbol("internals");function pe(e){return e&&String(e).trim().toLowerCase()}function le(e){return!1===e||null==e?e:W.isArray(e)?e.map(le):String(e)}function de(e,t,r,n,s){return W.isFunction(n)?n.call(this,t,r):(s&&(t=r),W.isString(t)?W.isString(n)?-1!==t.indexOf(n):W.isRegExp(n)?n.test(t):void 0:void 0)}class he{constructor(e){e&&this.set(e)}set(e,t,r){const n=this;function s(e,t,r){const s=pe(t);if(!s)throw new Error("header name must be a non-empty string");const i=W.findKey(n,s);(!i||void 0===n[i]||!0===r||void 0===r&&!1!==n[i])&&(n[i||t]=le(e))}const i=(e,t)=>W.forEach(e,((e,r)=>s(e,r,t)));return W.isPlainObject(e)||e instanceof this.constructor?i(e,t):W.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?i((e=>{const t={};let r,n,s;return e&&e.split("\n").forEach((function(e){s=e.indexOf(":"),r=e.substring(0,s).trim().toLowerCase(),n=e.substring(s+1).trim(),!r||t[r]&&ce[r]||("set-cookie"===r?t[r]?t[r].push(n):t[r]=[n]:t[r]=t[r]?t[r]+", "+n:n)})),t})(e),t):null!=e&&s(t,e,r),this}get(e,t){if(e=pe(e)){const r=W.findKey(this,e);if(r){const e=this[r];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=r.exec(e);)t[n[1]]=n[2];return t}(e);if(W.isFunction(t))return t.call(this,e,r);if(W.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=pe(e)){const r=W.findKey(this,e);return!(!r||void 0===this[r]||t&&!de(0,this[r],r,t))}return!1}delete(e,t){const r=this;let n=!1;function s(e){if(e=pe(e)){const s=W.findKey(r,e);!s||t&&!de(0,r[s],s,t)||(delete r[s],n=!0)}}return W.isArray(e)?e.forEach(s):s(e),n}clear(e){const t=Object.keys(this);let r=t.length,n=!1;for(;r--;){const s=t[r];e&&!de(0,this[s],s,e,!0)||(delete this[s],n=!0)}return n}normalize(e){const t=this,r={};return W.forEach(this,((n,s)=>{const i=W.findKey(r,s);if(i)return t[i]=le(n),void delete t[s];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,r)=>t.toUpperCase()+r))}(s):String(s).trim();a!==s&&delete t[s],t[a]=le(n),r[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return W.forEach(this,((r,n)=>{null!=r&&!1!==r&&(t[n]=e&&W.isArray(r)?r.join(", "):r)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const r=new this(e);return t.forEach((e=>r.set(e))),r}static accessor(e){const t=(this[ue]=this[ue]={accessors:{}}).accessors,r=this.prototype;function n(e){const n=pe(e);t[n]||(function(e,t){const r=W.toCamelCase(" "+t);["get","set","has"].forEach((n=>{Object.defineProperty(e,n+r,{value:function(e,r,s){return this[n].call(this,t,e,r,s)},configurable:!0})}))}(r,e),t[n]=!0)}return W.isArray(e)?e.forEach(n):n(e),this}}he.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),W.reduceDescriptors(he.prototype,(({value:e},t)=>{let r=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[r]=e}}})),W.freezeMethods(he);var fe=he;function ye(e,t){const r=this||oe,n=t||r,s=fe.from(n.headers);let i=n.data;return W.forEach(e,(function(e){i=e.call(r,i,s.normalize(),t?t.status:void 0)})),s.normalize(),i}function me(e){return!(!e||!e.__CANCEL__)}function we(e,t,r){U.call(this,null==e?"canceled":e,U.ERR_CANCELED,t,r),this.name="CanceledError"}W.inherits(we,U,{__CANCEL__:!0});var ge=se.hasStandardBrowserEnv?{write(e,t,r,n,s,i){const a=[e+"="+encodeURIComponent(t)];W.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),W.isString(n)&&a.push("path="+n),W.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function be(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}var Ee=se.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let r;function n(r){let n=r;return e&&(t.setAttribute("href",n),n=t.href),t.setAttribute("href",n),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return r=n(window.location.href),function(e){const t=W.isString(e)?n(e):e;return t.protocol===r.protocol&&t.host===r.host}}():function(){return!0};function _e(e,t){let r=0;const n=function(e,t){e=e||10;const r=new Array(e),n=new Array(e);let s,i=0,a=0;return t=void 0!==t?t:1e3,function(o){const c=Date.now(),u=n[a];s||(s=c),r[i]=o,n[i]=c;let p=a,l=0;for(;p!==i;)l+=r[p++],p%=e;if(i=(i+1)%e,i===a&&(a=(a+1)%e),c-s<t)return;const d=u&&c-u;return d?Math.round(1e3*l/d):void 0}}(50,250);return s=>{const i=s.loaded,a=s.lengthComputable?s.total:void 0,o=i-r,c=n(o);r=i;const u={loaded:i,total:a,progress:a?i/a:void 0,bytes:o,rate:c||void 0,estimated:c&&a&&i<=a?(a-i)/c:void 0,event:s};u[t?"download":"upload"]=!0,e(u)}}const ve={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,r){let n=e.data;const s=fe.from(e.headers).normalize();let i,a,{responseType:o,withXSRFToken:c}=e;function u(){e.cancelToken&&e.cancelToken.unsubscribe(i),e.signal&&e.signal.removeEventListener("abort",i)}if(W.isFormData(n))if(se.hasStandardBrowserEnv||se.hasStandardBrowserWebWorkerEnv)s.setContentType(!1);else if(!1!==(a=s.getContentType())){const[e,...t]=a?a.split(";").map((e=>e.trim())).filter(Boolean):[];s.setContentType([e||"multipart/form-data",...t].join("; "))}let p=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",r=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";s.set("Authorization","Basic "+btoa(t+":"+r))}const l=be(e.baseURL,e.url);function d(){if(!p)return;const n=fe.from("getAllResponseHeaders"in p&&p.getAllResponseHeaders());!function(e,t,r){const n=r.config.validateStatus;r.status&&n&&!n(r.status)?t(new U("Request failed with status code "+r.status,[U.ERR_BAD_REQUEST,U.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):e(r)}((function(e){t(e),u()}),(function(e){r(e),u()}),{data:o&&"text"!==o&&"json"!==o?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p}),p=null}if(p.open(e.method.toUpperCase(),X(l,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,"onloadend"in p?p.onloadend=d:p.onreadystatechange=function(){p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))&&setTimeout(d)},p.onabort=function(){p&&(r(new U("Request aborted",U.ECONNABORTED,e,p)),p=null)},p.onerror=function(){r(new U("Network Error",U.ERR_NETWORK,e,p)),p=null},p.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const n=e.transitional||Z;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),r(new U(t,n.clarifyTimeoutError?U.ETIMEDOUT:U.ECONNABORTED,e,p)),p=null},se.hasStandardBrowserEnv&&(c&&W.isFunction(c)&&(c=c(e)),c||!1!==c&&Ee(l))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&ge.read(e.xsrfCookieName);t&&s.set(e.xsrfHeaderName,t)}void 0===n&&s.setContentType(null),"setRequestHeader"in p&&W.forEach(s.toJSON(),(function(e,t){p.setRequestHeader(t,e)})),W.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),o&&"json"!==o&&(p.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",_e(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",_e(e.onUploadProgress)),(e.cancelToken||e.signal)&&(i=t=>{p&&(r(!t||t.type?new we(null,e,p):t),p.abort(),p=null)},e.cancelToken&&e.cancelToken.subscribe(i),e.signal&&(e.signal.aborted?i():e.signal.addEventListener("abort",i)));const h=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(l);h&&-1===se.protocols.indexOf(h)?r(new U("Unsupported protocol "+h+":",U.ERR_BAD_REQUEST,e)):p.send(n||null)}))}};W.forEach(ve,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Ae=e=>`- ${e}`,Se=e=>W.isFunction(e)||null===e||!1===e;var ke=e=>{e=W.isArray(e)?e:[e];const{length:t}=e;let r,n;const s={};for(let i=0;i<t;i++){let t;if(r=e[i],n=r,!Se(r)&&(n=ve[(t=String(r)).toLowerCase()],void 0===n))throw new U(`Unknown adapter '${t}'`);if(n)break;s[t||"#"+i]=n}if(!n){const e=Object.entries(s).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));throw new U("There is no suitable adapter to dispatch the request "+(t?e.length>1?"since :\n"+e.map(Ae).join("\n"):" "+Ae(e[0]):"as no adapter specified"),"ERR_NOT_SUPPORT")}return n};function xe(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new we(null,e)}function Pe(e){return xe(e),e.headers=fe.from(e.headers),e.data=ye.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),ke(e.adapter||oe.adapter)(e).then((function(t){return xe(e),t.data=ye.call(e,e.transformResponse,t),t.headers=fe.from(t.headers),t}),(function(t){return me(t)||(xe(e),t&&t.response&&(t.response.data=ye.call(e,e.transformResponse,t.response),t.response.headers=fe.from(t.response.headers))),Promise.reject(t)}))}const Ce=e=>e instanceof fe?e.toJSON():e;function Oe(e,t){t=t||{};const r={};function n(e,t,r){return W.isPlainObject(e)&&W.isPlainObject(t)?W.merge.call({caseless:r},e,t):W.isPlainObject(t)?W.merge({},t):W.isArray(t)?t.slice():t}function s(e,t,r){return W.isUndefined(t)?W.isUndefined(e)?void 0:n(void 0,e,r):n(e,t,r)}function i(e,t){if(!W.isUndefined(t))return n(void 0,t)}function a(e,t){return W.isUndefined(t)?W.isUndefined(e)?void 0:n(void 0,e):n(void 0,t)}function o(r,s,i){return i in t?n(r,s):i in e?n(void 0,r):void 0}const c={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:o,headers:(e,t)=>s(Ce(e),Ce(t),!0)};return W.forEach(Object.keys(Object.assign({},e,t)),(function(n){const i=c[n]||s,a=i(e[n],t[n],n);W.isUndefined(a)&&i!==o||(r[n]=a)})),r}const He={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{He[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}}));const Re={};He.transitional=function(e,t,r){function n(e,t){return"[Axios v1.6.7] Transitional option '"+e+"'"+t+(r?". "+r:"")}return(r,s,i)=>{if(!1===e)throw new U(n(s," has been removed"+(t?" in "+t:"")),U.ERR_DEPRECATED);return t&&!Re[s]&&(Re[s]=!0,console.warn(n(s," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(r,s,i)}};var Te={assertOptions:function(e,t,r){if("object"!=typeof e)throw new U("options must be an object",U.ERR_BAD_OPTION_VALUE);const n=Object.keys(e);let s=n.length;for(;s-- >0;){const i=n[s],a=t[i];if(a){const t=e[i],r=void 0===t||a(t,i,e);if(!0!==r)throw new U("option "+i+" must be "+r,U.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new U("Unknown option "+i,U.ERR_BAD_OPTION)}},validators:He};const Ke=Te.validators;class je{constructor(e){this.defaults=e,this.interceptors={request:new Y,response:new Y}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const r=t.stack?t.stack.replace(/^.+\n/,""):"";e.stack?r&&!String(e.stack).endsWith(r.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+r):e.stack=r}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Oe(this.defaults,t);const{transitional:r,paramsSerializer:n,headers:s}=t;void 0!==r&&Te.assertOptions(r,{silentJSONParsing:Ke.transitional(Ke.boolean),forcedJSONParsing:Ke.transitional(Ke.boolean),clarifyTimeoutError:Ke.transitional(Ke.boolean)},!1),null!=n&&(W.isFunction(n)?t.paramsSerializer={serialize:n}:Te.assertOptions(n,{encode:Ke.function,serialize:Ke.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let i=s&&W.merge(s.common,s[t.method]);s&&W.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete s[e]})),t.headers=fe.concat(i,s);const a=[];let o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const c=[];let u;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let p,l=0;if(!o){const e=[Pe.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,c),p=e.length,u=Promise.resolve(t);l<p;)u=u.then(e[l++],e[l++]);return u}p=a.length;let d=t;for(l=0;l<p;){const e=a[l++],t=a[l++];try{d=e(d)}catch(e){t.call(this,e);break}}try{u=Pe.call(this,d)}catch(e){return Promise.reject(e)}for(l=0,p=c.length;l<p;)u=u.then(c[l++],c[l++]);return u}getUri(e){return X(be((e=Oe(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}W.forEach(["delete","get","head","options"],(function(e){je.prototype[e]=function(t,r){return this.request(Oe(r||{},{method:e,url:t,data:(r||{}).data}))}})),W.forEach(["post","put","patch"],(function(e){function t(t){return function(r,n,s){return this.request(Oe(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}je.prototype[e]=t(),je.prototype[e+"Form"]=t(!0)}));var Ie=je;class De{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const r=this;this.promise.then((e=>{if(!r._listeners)return;let t=r._listeners.length;for(;t-- >0;)r._listeners[t](e);r._listeners=null})),this.promise.then=e=>{let t;const n=new Promise((e=>{r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},e((function(e,n,s){r.reason||(r.reason=new we(e,n,s),t(r.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new De((function(t){e=t})),cancel:e}}}var We=De;const Ue={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Ue).forEach((([e,t])=>{Ue[t]=e}));var Je=Ue;const Ne=function e(t){const r=new Ie(t),s=n(Ie.prototype.request,r);return W.extend(s,Ie.prototype,r,{allOwnKeys:!0}),W.extend(s,r,null,{allOwnKeys:!0}),s.create=function(r){return e(Oe(t,r))},s}(oe);Ne.Axios=Ie,Ne.CanceledError=we,Ne.CancelToken=We,Ne.isCancel=me,Ne.VERSION="1.6.7",Ne.toFormData=L,Ne.AxiosError=U,Ne.Cancel=Ne.CanceledError,Ne.all=function(e){return Promise.all(e)},Ne.spread=function(e){return function(t){return e.apply(null,t)}},Ne.isAxiosError=function(e){return W.isObject(e)&&!0===e.isAxiosError},Ne.mergeConfig=Oe,Ne.AxiosHeaders=fe,Ne.formToJSON=e=>ie(W.isHTMLForm(e)?new FormData(e):e),Ne.getAdapter=ke,Ne.HttpStatusCode=Je,Ne.default=Ne,e.exports=Ne},579:e=>{var t,r=Object.defineProperty,n=Object.getOwnPropertyDescriptor,s=Object.getOwnPropertyNames,i=Object.prototype.hasOwnProperty,a={};function o(e){return(Array.isArray(e)?e:e.issues).reduce(((e,t)=>{if(t.path){if(t.path.every((({key:e})=>"string"==typeof e||"number"==typeof e))){const r=t.path.map((({key:e})=>e)).join(".");e.nested[r]?e.nested[r].push(t.message):e.nested[r]=[t.message]}}else e.root?e.root.push(t.message):e.root=[t.message];return e}),{nested:{}})}((e,t)=>{for(var n in t)r(e,n,{get:t[n],enumerable:!0})})(a,{BIC_REGEX:()=>ir,BrandSymbol:()=>h,CUID2_REGEX:()=>ar,DECIMAL_REGEX:()=>or,EMAIL_REGEX:()=>cr,EMOJI_REGEX:()=>ur,HEXADECIMAL_REGEX:()=>pr,HEX_COLOR_REGEX:()=>lr,IMEI_REGEX:()=>dr,IPV4_REGEX:()=>hr,IPV6_REGEX:()=>fr,ISO_DATE_REGEX:()=>yr,ISO_DATE_TIME_REGEX:()=>mr,ISO_TIMESTAMP_REGEX:()=>br,ISO_TIME_REGEX:()=>wr,ISO_TIME_SECOND_REGEX:()=>gr,ISO_WEEK_REGEX:()=>Er,MAC48_REGEX:()=>_r,MAC64_REGEX:()=>vr,OCTAL_REGEX:()=>Ar,ULID_REGEX:()=>Sr,UUID_REGEX:()=>kr,ValiError:()=>d,actionIssue:()=>w,actionOutput:()=>g,any:()=>te,anyAsync:()=>re,array:()=>ne,arrayAsync:()=>se,bic:()=>Ir,bigint:()=>ie,bigintAsync:()=>ae,blob:()=>oe,blobAsync:()=>ce,boolean:()=>ue,booleanAsync:()=>pe,brand:()=>f,bytes:()=>Dr,coerce:()=>y,coerceAsync:()=>m,creditCard:()=>Jr,cuid2:()=>Nr,custom:()=>Mr,customAsync:()=>$r,date:()=>le,dateAsync:()=>de,decimal:()=>qr,defaultArgs:()=>b,deleteGlobalConfig:()=>v,deleteGlobalMessage:()=>k,deleteSchemaMessage:()=>C,deleteSpecificMessage:()=>R,discriminatedUnion:()=>xt,discriminatedUnionAsync:()=>Ct,email:()=>Br,emoji:()=>Lr,endsWith:()=>Fr,enumAsync:()=>ye,enumType:()=>Ye,enumTypeAsync:()=>Qe,enum_:()=>he,equal:()=>Gr,excludes:()=>zr,fallback:()=>B,fallbackAsync:()=>L,finite:()=>Vr,flatten:()=>o,forward:()=>F,forwardAsync:()=>G,getDefault:()=>z,getDefaultAsync:()=>V,getDefaults:()=>X,getDefaultsAsync:()=>Y,getFallback:()=>$,getFallbackAsync:()=>q,getFallbacks:()=>Z,getFallbacksAsync:()=>Q,getGlobalConfig:()=>_,getGlobalMessage:()=>S,getSchemaMessage:()=>P,getSpecificMessage:()=>H,hash:()=>Yr,hexColor:()=>Qr,hexadecimal:()=>Zr,i18n:()=>T,imei:()=>en,includes:()=>tn,instance:()=>we,instanceAsync:()=>ge,integer:()=>rn,intersect:()=>Ee,intersection:()=>_e,ip:()=>nn,ipv4:()=>sn,ipv6:()=>an,is:()=>ee,isLuhnAlgo:()=>j,isoDate:()=>on,isoDateTime:()=>cn,isoTime:()=>un,isoTimeSecond:()=>pn,isoTimestamp:()=>ln,isoWeek:()=>dn,keyof:()=>Kt,length:()=>hn,literal:()=>ve,literalAsync:()=>Ae,mac:()=>fn,mac48:()=>yn,mac64:()=>mn,map:()=>Se,mapAsync:()=>ke,maxBytes:()=>wn,maxLength:()=>gn,maxRange:()=>_n,maxSize:()=>bn,maxValue:()=>En,merge:()=>jt,mergeAsync:()=>It,mimeType:()=>An,minBytes:()=>vn,minLength:()=>Sn,minRange:()=>Pn,minSize:()=>kn,minValue:()=>xn,multipleOf:()=>Cn,nan:()=>xe,nanAsync:()=>Pe,nativeEnum:()=>fe,nativeEnumAsync:()=>me,never:()=>Ce,neverAsync:()=>Oe,nonNullable:()=>He,nonNullableAsync:()=>Re,nonNullish:()=>Te,nonNullishAsync:()=>Ke,nonOptional:()=>je,nonOptionalAsync:()=>Ie,notBytes:()=>On,notLength:()=>Hn,notSize:()=>Rn,notValue:()=>Tn,nullAsync:()=>$e,nullType:()=>Me,nullTypeAsync:()=>qe,null_:()=>Ne,nullable:()=>De,nullableAsync:()=>We,nullish:()=>Ue,nullishAsync:()=>Je,number:()=>Be,numberAsync:()=>Le,object:()=>Fe,objectAsync:()=>Ge,octal:()=>Kn,omit:()=>Dt,omitAsync:()=>Wt,optional:()=>ze,optionalAsync:()=>Ve,parse:()=>Ut,parseAsync:()=>Jt,partial:()=>Nt,partialAsync:()=>Mt,passthrough:()=>$t,passthroughAsync:()=>qt,pick:()=>Bt,pickAsync:()=>Lt,picklist:()=>Xe,picklistAsync:()=>Ze,pipeResult:()=>U,pipeResultAsync:()=>J,record:()=>st,recordAsync:()=>it,recursive:()=>at,recursiveAsync:()=>ot,regex:()=>jn,required:()=>Ft,requiredAsync:()=>Gt,restAndDefaultArgs:()=>N,safeInteger:()=>In,safeParse:()=>zt,safeParseAsync:()=>Vt,schemaIssue:()=>M,schemaResult:()=>I,set:()=>ct,setAsync:()=>ut,setGlobalConfig:()=>E,setGlobalMessage:()=>A,setSchemaMessage:()=>x,setSpecificMessage:()=>O,size:()=>Dn,special:()=>pt,specialAsync:()=>lt,startsWith:()=>Wn,strict:()=>Xt,strictAsync:()=>Yt,string:()=>et,stringAsync:()=>tt,stringify:()=>D,strip:()=>Zt,stripAsync:()=>Qt,symbol:()=>dt,symbolAsync:()=>ht,toCustom:()=>xr,toCustomAsync:()=>Pr,toLowerCase:()=>Cr,toMaxValue:()=>Or,toMinValue:()=>Hr,toTrimmed:()=>Rr,toTrimmedEnd:()=>Tr,toTrimmedStart:()=>Kr,toUpperCase:()=>jr,transform:()=>er,transformAsync:()=>tr,tuple:()=>ft,tupleAsync:()=>yt,ulid:()=>Un,undefinedAsync:()=>gt,undefinedType:()=>wt,undefinedTypeAsync:()=>bt,undefined_:()=>mt,union:()=>_t,unionAsync:()=>vt,unknown:()=>At,unknownAsync:()=>St,unwrap:()=>rr,url:()=>Jn,useDefault:()=>sr,uuid:()=>Nn,value:()=>Mn,variant:()=>kt,variantAsync:()=>Pt,voidAsync:()=>Rt,voidType:()=>Ht,voidTypeAsync:()=>Tt,void_:()=>Ot,withDefault:()=>nr}),e.exports=(t=a,((e,t,a,o)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let a of s(t))i.call(e,a)||undefined===a||r(e,a,{get:()=>t[a],enumerable:!(o=n(t,a))||o.enumerable});return e})(r({},"__esModule",{value:!0}),t));var c,u,p,l,d=class extends Error{issues;constructor(e){super(e[0].message),this.name="ValiError",this.issues=e}},h=Symbol("brand");function f(e,t){return e}function y(e,t){return{...e,_parse:(r,n)=>e._parse(t(r),n)}}function m(e,t){return{...e,_parse:async(r,n)=>e._parse(await t(r),n)}}function w(e,t,r,n,s){return{issues:[{context:e,reference:t,input:r,label:n,received:s}]}}function g(e){return{output:e}}function b(e,t){return Array.isArray(e)?[void 0,e]:[e,t]}function E(e){c={...c,...e}}function _(e){return{lang:e?.lang??c?.lang,message:e?.message,abortEarly:e?.abortEarly??c?.abortEarly,abortPipeEarly:e?.abortPipeEarly??c?.abortPipeEarly,skipPipe:e?.skipPipe??c?.skipPipe}}function v(){c=void 0}function A(e,t){u||(u=new Map),u.set(t,e)}function S(e){return u?.get(e)}function k(e){u?.delete(e)}function x(e,t){p||(p=new Map),p.set(t,e)}function P(e){return p?.get(e)}function C(e){p?.delete(e)}function O(e,t,r){l||(l=new Map),l.get(e)||l.set(e,new Map),l.get(e).set(r,t)}function H(e,t){return l?.get(e)?.get(t)}function R(e,t){l?.get(e)?.delete(t)}function T(e,t,r,n){const s=e.message??H(t,n.lang)??("type"===e.type?P(n.lang):null)??r?.message??S(n.lang)??n.message;return"function"==typeof s?s(n):s}var K=/\D/gu;function j(e){const t=e.replace(K,"");let r=t.length,n=1,s=0;for(;r;){const e=+t[--r];n^=1,s+=n?[0,2,4,6,8,1,3,5,7,9][e]:e}return s%10==0}function I(e,t,r){return{typed:e,output:t,issues:r}}function D(e){let t=typeof e;return"object"===t&&(t=e?Object.getPrototypeOf(e).constructor.name:"null"),"string"===t?`"${e}"`:"number"===t||"bigint"===t||"boolean"===t?`${e}`:t}function W(e,t,r){const n=r.received??D(r.input),s={reason:e.type,context:r.context.type,expected:r.context.expects,received:n,message:`Invalid ${r.label}: ${r.context.expects?`Expected ${r.context.expects} but r`:"R"}eceived ${n}`,input:r.input,requirement:r.context.requirement,path:r.path,lang:t?.lang,abortEarly:t?.abortEarly,abortPipeEarly:t?.abortPipeEarly,skipPipe:t?.skipPipe};return s.message=T(r.context,r.reference,t,s),s}function U(e,t,r,n){if(e.pipe&&!r?.skipPipe)for(const s of e.pipe){const i=s._parse(t);if(i.issues){for(const t of i.issues){const s=W(e,r,t);n?n.push(s):n=[s]}if(r?.abortEarly||r?.abortPipeEarly)break}else t=i.output}return I(!0,t,n)}async function J(e,t,r,n){if(e.pipe&&!r?.skipPipe)for(const s of e.pipe){const i=await s._parse(t);if(i.issues){for(const t of i.issues){const s=W(e,r,t);n?n.push(s):n=[s]}if(r?.abortEarly||r?.abortPipeEarly)break}else t=i.output}return I(!0,t,n)}function N(e,t,r){if(!e||"object"==typeof e&&!Array.isArray(e)){const[n,s]=b(t,r);return[e,n,s]}const[n,s]=b(e,t);return[void 0,n,s]}function M(e,t,r,n,s){const i=D(r),a=s?.expected??e.expects,o={reason:s?.reason??"type",context:e.type,expected:a,received:i,message:`Invalid type: Expected ${a} but received ${i}`,input:r,path:s?.path,issues:s?.issues,lang:n?.lang,abortEarly:n?.abortEarly,abortPipeEarly:n?.abortPipeEarly,skipPipe:n?.skipPipe};return o.message=T(e,t,n,o),{typed:!1,output:r,issues:[o]}}function $(e,t){return"function"==typeof e.fallback?e.fallback(t):e.fallback}async function q(e,t){return"function"==typeof e.fallback?await e.fallback(t):e.fallback}function B(e,t){return{...e,fallback:t,_parse(t,r){const n=e._parse(t,r);return n.issues?I(!0,$(this,{input:t,issues:n.issues})):n}}}function L(e,t){return{...e,fallback:t,async _parse(t,r){const n=await e._parse(t,r);return n.issues?I(!0,await q(this,{input:t,issues:n.issues})):n}}}function F(e,t){return{...e,_parse(r){const n=e._parse(r);if(n.issues)for(const e of n.issues){let n=r;for(const r of t){const t=n[r];e.input=t;const s={type:"unknown",origin:"value",input:n,key:r,value:t};if(e.path?e.path.push(s):e.path=[s],!t)break;n=t}}return n}}}function G(e,t){return{...e,async _parse(r){const n=await e._parse(r);if(n.issues)for(const e of n.issues){let n=r;for(const r of t){const t=n[r];e.input=t;const s={type:"unknown",origin:"value",input:n,key:r,value:t};if(e.path?e.path.push(s):e.path=[s],!t)break;n=t}}return n}}}function z(e){return"function"==typeof e.default?e.default():e.default}async function V(e){return"function"==typeof e.default?await e.default():e.default}function X(e){let t;if(void 0!==e.default)t=z(e);else if("type"in e)if("object"===e.type){t={};for(const r in e.entries)t[r]=X(e.entries[r])}else if("tuple"===e.type){t=[];for(let r=0;r<e.items.length;r++)t.push(X(e.items[r]))}return t}async function Y(e){let t;if(void 0!==e.default)t=await V(e);else if("type"in e)if("object"===e.type){t={};for(const r in e.entries)t[r]=await Y(e.entries[r])}else if("tuple"===e.type){t=[];for(let r=0;r<e.items.length;r++)t.push(await Y(e.items[r]))}return t}function Z(e){let t;if(void 0!==e.fallback)t=$(e);else if("type"in e)if("object"===e.type){t={};for(const r in e.entries)t[r]=Z(e.entries[r])}else if("tuple"===e.type){t=[];for(let r=0;r<e.items.length;r++)t.push(Z(e.items[r]))}return t}async function Q(e){let t;return void 0!==e.fallback?t=await q(e):"type"in e&&("object"===e.type?(t={},await Promise.all(Object.entries(e.entries).map((async([e,r])=>{t[e]=await Q(r)})))):"tuple"===e.type&&(t=await Promise.all(e.items.map((e=>Q(e)))))),t}function ee(e,t,r){return!e._parse(t,{abortEarly:!0,skipPipe:_(r)?.skipPipe}).issues}function te(e){return{type:"any",expects:"any",async:!1,pipe:e,_parse(e,t){return U(this,e,t)}}}function re(e){return{type:"any",expects:"any",async:!0,pipe:e,async _parse(e,t){return J(this,e,t)}}}function ne(e,t,r){const[n,s]=b(t,r);return{type:"array",expects:"Array",async:!1,item:e,message:n,pipe:s,_parse(e,t){if(Array.isArray(e)){let r,n=!0;const s=[];for(let i=0;i<e.length;i++){const a=e[i],o=this.item._parse(a,t);if(o.issues){const s={type:"array",origin:"value",input:e,key:i,value:a};for(const e of o.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=o.issues),t?.abortEarly){n=!1;break}}o.typed||(n=!1),s.push(o.output)}return n?U(this,s,t,r):I(!1,s,r)}return M(this,ne,e,t)}}}function se(e,t,r){const[n,s]=b(t,r);return{type:"array",expects:"Array",async:!0,item:e,message:n,pipe:s,async _parse(e,t){if(Array.isArray(e)){let r,n=!0;const s=[];return await Promise.all(e.map((async(i,a)=>{if(!t?.abortEarly||!r){const o=await this.item._parse(i,t);if(!t?.abortEarly||!r){if(o.issues){const s={type:"array",origin:"value",input:e,key:a,value:i};for(const e of o.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=o.issues),t?.abortEarly)throw n=!1,null}o.typed||(n=!1),s[a]=o.output}}}))).catch((()=>null)),n?J(this,s,t,r):I(!1,s,r)}return M(this,se,e,t)}}}function ie(e,t){const[r,n]=b(e,t);return{type:"bigint",expects:"bigint",async:!1,message:r,pipe:n,_parse(e,t){return"bigint"==typeof e?U(this,e,t):M(this,ie,e,t)}}}function ae(e,t){const[r,n]=b(e,t);return{type:"bigint",expects:"bigint",async:!0,message:r,pipe:n,async _parse(e,t){return"bigint"==typeof e?J(this,e,t):M(this,ae,e,t)}}}function oe(e,t){const[r,n]=b(e,t);return{type:"blob",expects:"Blob",async:!1,message:r,pipe:n,_parse(e,t){return e instanceof Blob?U(this,e,t):M(this,oe,e,t)}}}function ce(e,t){const[r,n]=b(e,t);return{type:"blob",expects:"Blob",async:!0,message:r,pipe:n,async _parse(e,t){return e instanceof Blob?J(this,e,t):M(this,ce,e,t)}}}function ue(e,t){const[r,n]=b(e,t);return{type:"boolean",expects:"boolean",async:!1,message:r,pipe:n,_parse(e,t){return"boolean"==typeof e?U(this,e,t):M(this,ue,e,t)}}}function pe(e,t){const[r,n]=b(e,t);return{type:"boolean",expects:"boolean",async:!0,message:r,pipe:n,async _parse(e,t){return"boolean"==typeof e?J(this,e,t):M(this,pe,e,t)}}}function le(e,t){const[r,n]=b(e,t);return{type:"date",expects:"Date",async:!1,message:r,pipe:n,_parse(e,t){return e instanceof Date&&!isNaN(e.getTime())?U(this,e,t):M(this,le,e,t)}}}function de(e,t){const[r,n]=b(e,t);return{type:"date",expects:"Date",async:!0,message:r,pipe:n,async _parse(e,t){return e instanceof Date&&!isNaN(e.getTime())?J(this,e,t):M(this,de,e,t)}}}function he(e,t){const r=Object.values(e);return{type:"enum",expects:r.map(D).join(" | "),async:!1,enum:e,message:t,_parse(e,t){return r.includes(e)?I(!0,e):M(this,he,e,t)}}}var fe=he;function ye(e,t){const r=Object.values(e);return{type:"enum",expects:r.map(D).join(" | "),async:!0,enum:e,message:t,async _parse(e,t){return r.includes(e)?I(!0,e):M(this,ye,e,t)}}}var me=ye;function we(e,t,r){const[n,s]=b(t,r);return{type:"instance",expects:e.name,async:!1,class:e,message:n,pipe:s,_parse(e,t){return e instanceof this.class?U(this,e,t):M(this,we,e,t)}}}function ge(e,t,r){const[n,s]=b(t,r);return{type:"instance",expects:e.name,async:!0,class:e,message:n,pipe:s,async _parse(e,t){return e instanceof this.class?J(this,e,t):M(this,ge,e,t)}}}function be(e,t){if(typeof e==typeof t){if(e===t||e instanceof Date&&t instanceof Date&&+e==+t)return{output:e};if(Array.isArray(e)&&Array.isArray(t)){if(e.length===t.length){const r=[];for(let n=0;n<e.length;n++){const s=be(e[n],t[n]);if(s.invalid)return s;r.push(s.output)}return{output:r}}return{invalid:!0}}if(e&&t&&e.constructor===Object&&t.constructor===Object){const r={...e,...t};for(const n in e)if(n in t){const s=be(e[n],t[n]);if(s.invalid)return s;r[n]=s.output}return{output:r}}}return{invalid:!0}}function Ee(e,t,r){const[n,s]=b(t,r);return{type:"intersect",expects:[...new Set(e.map((e=>e.expects)))].join(" & "),async:!1,options:e,message:n,pipe:s,_parse(e,t){let r,n,s=!0;const i=[];for(const n of this.options){const a=n._parse(e,t);if(a.issues){if(r)for(const e of a.issues)r.push(e);else r=a.issues;if(t?.abortEarly){s=!1;break}}a.typed||(s=!1),i.push(a.output)}if(s){n=i[0];for(let r=1;r<i.length;r++){const s=be(n,i[r]);if(s.invalid)return M(this,Ee,e,t);n=s.output}return U(this,n,t,r)}return I(!1,n,r)}}}var _e=Ee;function ve(e,t){return{type:"literal",expects:D(e),async:!1,literal:e,message:t,_parse(e,t){return e===this.literal?I(!0,e):M(this,ve,e,t)}}}function Ae(e,t){return{type:"literal",expects:D(e),async:!0,literal:e,message:t,async _parse(e,t){return e===this.literal?I(!0,e):M(this,Ae,e,t)}}}function Se(e,t,r,n){const[s,i]=b(r,n);return{type:"map",expects:"Map",async:!1,key:e,value:t,message:s,pipe:i,_parse(e,t){if(e instanceof Map){let r,n=!0;const s=new Map;for(const[i,a]of e.entries()){let o;const c=this.key._parse(i,t);if(c.issues){o={type:"map",origin:"key",input:e,key:i,value:a};for(const e of c.issues)e.path?e.path.unshift(o):e.path=[o],r?.push(e);if(r||(r=c.issues),t?.abortEarly){n=!1;break}}const u=this.value._parse(a,t);if(u.issues){o=o??{type:"map",origin:"value",input:e,key:i,value:a};for(const e of u.issues)e.path?e.path.unshift(o):e.path=[o],r?.push(e);if(r||(r=u.issues),t?.abortEarly){n=!1;break}}c.typed&&u.typed||(n=!1),s.set(c.output,u.output)}return n?U(this,s,t,r):I(!1,s,r)}return M(this,Se,e,t)}}}function ke(e,t,r,n){const[s,i]=b(r,n);return{type:"map",expects:"Map",async:!0,key:e,value:t,message:s,pipe:i,async _parse(e,t){if(e instanceof Map){let r,n=!0;const s=new Map;return await Promise.all(Array.from(e.entries()).map((async([i,a])=>{let o;const[c,u]=await Promise.all([{schema:this.key,value:i,origin:"key"},{schema:this.value,value:a,origin:"value"}].map((async({schema:n,value:s,origin:c})=>{if(!t?.abortEarly||!r){const u=await n._parse(s,t);if(!t?.abortEarly||!r){if(u.issues){o=o??{type:"map",origin:c,input:e,key:i,value:a};for(const e of u.issues)e.path?e.path.unshift(o):e.path=[o],r?.push(e);if(r||(r=u.issues),t?.abortEarly)throw null}return u}}}))).catch((()=>[]));c?.typed&&u?.typed||(n=!1),c&&u&&s.set(c.output,u.output)}))),n?J(this,s,t,r):I(!1,s,r)}return M(this,ke,e,t)}}}function xe(e){return{type:"nan",expects:"NaN",async:!1,message:e,_parse(e,t){return Number.isNaN(e)?I(!0,e):M(this,xe,e,t)}}}function Pe(e){return{type:"nan",expects:"NaN",async:!0,message:e,async _parse(e,t){return Number.isNaN(e)?I(!0,e):M(this,Pe,e,t)}}}function Ce(e){return{type:"never",expects:"never",async:!1,message:e,_parse(e,t){return M(this,Ce,e,t)}}}function Oe(e){return{type:"never",expects:"never",async:!0,message:e,async _parse(e,t){return M(this,Oe,e,t)}}}function He(e,t){return{type:"non_nullable",expects:"!null",async:!1,wrapped:e,message:t,_parse(e,t){return null===e?M(this,He,e,t):this.wrapped._parse(e,t)}}}function Re(e,t){return{type:"non_nullable",expects:"!null",async:!0,wrapped:e,message:t,async _parse(e,t){return null===e?M(this,Re,e,t):this.wrapped._parse(e,t)}}}function Te(e,t){return{type:"non_nullish",expects:"!null & !undefined",async:!1,wrapped:e,message:t,_parse(e,t){return null==e?M(this,Te,e,t):this.wrapped._parse(e,t)}}}function Ke(e,t){return{type:"non_nullish",expects:"!null & !undefined",async:!0,wrapped:e,message:t,async _parse(e,t){return null==e?M(this,Ke,e,t):this.wrapped._parse(e,t)}}}function je(e,t){return{type:"non_optional",expects:"!undefined",async:!1,wrapped:e,message:t,_parse(e,t){return void 0===e?M(this,je,e,t):this.wrapped._parse(e,t)}}}function Ie(e,t){return{type:"non_optional",expects:"!undefined",async:!0,wrapped:e,message:t,async _parse(e,t){return void 0===e?M(this,Ie,e,t):this.wrapped._parse(e,t)}}}function De(e,t){return{type:"nullable",expects:`${e.expects} | null`,async:!1,wrapped:e,default:t,_parse(e,t){if(null===e){const t=z(this);if(void 0===t)return I(!0,e);e=t}return this.wrapped._parse(e,t)}}}function We(e,t){return{type:"nullable",expects:`${e.expects} | null`,async:!0,wrapped:e,default:t,async _parse(e,t){if(null===e){const t=await V(this);if(void 0===t)return I(!0,e);e=t}return this.wrapped._parse(e,t)}}}function Ue(e,t){return{type:"nullish",expects:`${e.expects} | null | undefined`,async:!1,wrapped:e,default:t,_parse(e,t){if(null==e){const t=z(this);if(void 0===t)return I(!0,e);e=t}return this.wrapped._parse(e,t)}}}function Je(e,t){return{type:"nullish",expects:`${e.expects} | null | undefined`,async:!0,wrapped:e,default:t,async _parse(e,t){if(null==e){const t=await V(this);if(void 0===t)return I(!0,e);e=t}return this.wrapped._parse(e,t)}}}function Ne(e){return{type:"null",expects:"null",async:!1,message:e,_parse(e,t){return null===e?I(!0,e):M(this,Ne,e,t)}}}var Me=Ne;function $e(e){return{type:"null",expects:"null",async:!0,message:e,async _parse(e,t){return null===e?I(!0,e):M(this,$e,e,t)}}}var qe=$e;function Be(e,t){const[r,n]=b(e,t);return{type:"number",expects:"number",async:!1,message:r,pipe:n,_parse(e,t){return"number"!=typeof e||isNaN(e)?M(this,Be,e,t):U(this,e,t)}}}function Le(e,t){const[r,n]=b(e,t);return{type:"number",expects:"number",async:!0,message:r,pipe:n,async _parse(e,t){return"number"!=typeof e||isNaN(e)?M(this,Le,e,t):J(this,e,t)}}}function Fe(e,t,r,n){const[s,i,a]=N(t,r,n);let o;return{type:"object",expects:"Object",async:!1,entries:e,rest:s,message:i,pipe:a,_parse(e,t){if(e&&"object"==typeof e){o=o??Object.entries(this.entries);let r,n=!0;const s={};for(const[i,a]of o){const o=e[i],c=a._parse(o,t);if(c.issues){const s={type:"object",origin:"value",input:e,key:i,value:o};for(const e of c.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=c.issues),t?.abortEarly){n=!1;break}}c.typed||(n=!1),(void 0!==c.output||i in e)&&(s[i]=c.output)}if(this.rest&&(!t?.abortEarly||!r))for(const i in e)if(!(i in this.entries)){const a=e[i],o=this.rest._parse(a,t);if(o.issues){const s={type:"object",origin:"value",input:e,key:i,value:a};for(const e of o.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=o.issues),t?.abortEarly){n=!1;break}}o.typed||(n=!1),s[i]=o.output}return n?U(this,s,t,r):I(!1,s,r)}return M(this,Fe,e,t)}}}function Ge(e,t,r,n){const[s,i,a]=N(t,r,n);let o;return{type:"object",expects:"Object",async:!0,entries:e,rest:s,message:i,pipe:a,async _parse(e,t){if(e&&"object"==typeof e){o=o??Object.entries(this.entries);let r,n=!0;const s={};return await Promise.all([Promise.all(o.map((async([i,a])=>{if(!t?.abortEarly||!r){const o=e[i],c=await a._parse(o,t);if(!t?.abortEarly||!r){if(c.issues){const s={type:"object",origin:"value",input:e,key:i,value:o};for(const e of c.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=c.issues),t?.abortEarly)throw n=!1,null}c.typed||(n=!1),(void 0!==c.output||i in e)&&(s[i]=c.output)}}}))),this.rest&&Promise.all(Object.entries(e).map((async([i,a])=>{if(!(t?.abortEarly&&r||i in this.entries)){const o=await this.rest._parse(a,t);if(!t?.abortEarly||!r){if(o.issues){const s={type:"object",origin:"value",input:e,key:i,value:a};for(const e of o.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=o.issues),t?.abortEarly)throw n=!1,null}o.typed||(n=!1),s[i]=o.output}}})))]).catch((()=>null)),n?J(this,s,t,r):I(!1,s,r)}return M(this,Ge,e,t)}}}function ze(e,t){return{type:"optional",expects:`${e.expects} | undefined`,async:!1,wrapped:e,default:t,_parse(e,t){if(void 0===e){const t=z(this);if(void 0===t)return I(!0,e);e=t}return this.wrapped._parse(e,t)}}}function Ve(e,t){return{type:"optional",expects:`${e.expects} | undefined`,async:!0,wrapped:e,default:t,async _parse(e,t){if(void 0===e){const t=await V(this);if(void 0===t)return I(!0,e);e=t}return this.wrapped._parse(e,t)}}}function Xe(e,t){return{type:"picklist",expects:e.map(D).join(" | "),async:!1,options:e,message:t,_parse(e,t){return this.options.includes(e)?I(!0,e):M(this,Xe,e,t)}}}var Ye=Xe;function Ze(e,t){return{type:"picklist",expects:e.map(D).join(" | "),async:!0,options:e,message:t,async _parse(e,t){return this.options.includes(e)?I(!0,e):M(this,Ze,e,t)}}}var Qe=Ze;function et(e,t){const[r,n]=b(e,t);return{type:"string",expects:"string",async:!1,message:r,pipe:n,_parse(e,t){return"string"==typeof e?U(this,e,t):M(this,et,e,t)}}}function tt(e,t){const[r,n]=b(e,t);return{type:"string",expects:"string",async:!0,message:r,pipe:n,async _parse(e,t){return"string"==typeof e?J(this,e,t):M(this,tt,e,t)}}}function rt(e,t,r,n){if("object"==typeof t&&!Array.isArray(t)){const[s,i]=b(r,n);return[e,t,s,i]}const[s,i]=b(t,r);return[et(),e,s,i]}var nt=["__proto__","prototype","constructor"];function st(e,t,r,n){const[s,i,a,o]=rt(e,t,r,n);return{type:"record",expects:"Object",async:!1,key:s,value:i,message:a,pipe:o,_parse(e,t){if(e&&"object"==typeof e){let r,n=!0;const s={};for(const[i,a]of Object.entries(e))if(!nt.includes(i)){let o;const c=this.key._parse(i,t);if(c.issues){o={type:"record",origin:"key",input:e,key:i,value:a};for(const e of c.issues)e.path=[o],r?.push(e);if(r||(r=c.issues),t?.abortEarly){n=!1;break}}const u=this.value._parse(a,t);if(u.issues){o=o??{type:"record",origin:"value",input:e,key:i,value:a};for(const e of u.issues)e.path?e.path.unshift(o):e.path=[o],r?.push(e);if(r||(r=u.issues),t?.abortEarly){n=!1;break}}c.typed&&u.typed||(n=!1),c.typed&&(s[c.output]=u.output)}return n?U(this,s,t,r):I(!1,s,r)}return M(this,st,e,t)}}}function it(e,t,r,n){const[s,i,a,o]=rt(e,t,r,n);return{type:"record",expects:"Object",async:!0,key:s,value:i,message:a,pipe:o,async _parse(e,t){if(e&&"object"==typeof e){let r,n=!0;const s={};return await Promise.all(Object.entries(e).map((async([i,a])=>{if(!nt.includes(i)){let o;const[c,u]=await Promise.all([{schema:this.key,value:i,origin:"key"},{schema:this.value,value:a,origin:"value"}].map((async({schema:n,value:s,origin:c})=>{if(!t?.abortEarly||!r){const u=await n._parse(s,t);if(!t?.abortEarly||!r){if(u.issues){o=o??{type:"record",origin:c,input:e,key:i,value:a};for(const e of u.issues)e.path?e.path.unshift(o):e.path=[o],r?.push(e);if(r||(r=u.issues),t?.abortEarly)throw null}return u}}}))).catch((()=>[]));c?.typed&&u?.typed||(n=!1),c?.typed&&u&&(s[c.output]=u.output)}}))),n?J(this,s,t,r):I(!1,s,r)}return M(this,it,e,t)}}}function at(e){return{type:"recursive",expects:"unknown",async:!1,getter:e,_parse(e,t){return this.getter()._parse(e,t)}}}function ot(e){return{type:"recursive",expects:"unknown",async:!0,getter:e,async _parse(e,t){return this.getter()._parse(e,t)}}}function ct(e,t,r){const[n,s]=b(t,r);return{type:"set",expects:"Set",async:!1,value:e,message:n,pipe:s,_parse(e,t){if(e instanceof Set){let r,n=0,s=!0;const i=new Set;for(const a of e){const o=this.value._parse(a,t);if(o.issues){const i={type:"set",origin:"value",input:e,key:n,value:a};for(const e of o.issues)e.path?e.path.unshift(i):e.path=[i],r?.push(e);if(r||(r=o.issues),t?.abortEarly){s=!1;break}}o.typed||(s=!1),i.add(o.output),n++}return s?U(this,i,t,r):I(!1,i,r)}return M(this,ct,e,t)}}}function ut(e,t,r){const[n,s]=b(t,r);return{type:"set",expects:"Set",async:!0,value:e,message:n,pipe:s,async _parse(e,t){if(e instanceof Set){let r,n=!0;const s=new Set;return await Promise.all(Array.from(e.values()).map((async(i,a)=>{if(!t?.abortEarly||!r){const o=await this.value._parse(i,t);if(!t?.abortEarly||!r){if(o.issues){const s={type:"set",origin:"value",input:e,key:a,value:i};for(const e of o.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=o.issues),t?.abortEarly)throw n=!1,null}o.typed||(n=!1),s.add(o.output)}}}))).catch((()=>null)),n?J(this,s,t,r):I(!1,s,r)}return M(this,ut,e,t)}}}function pt(e,t,r){const[n,s]=b(t,r);return{type:"special",expects:"unknown",async:!1,check:e,message:n,pipe:s,_parse(e,t){return this.check(e)?U(this,e,t):M(this,pt,e,t)}}}function lt(e,t,r){const[n,s]=b(t,r);return{type:"special",expects:"unknown",async:!0,check:e,message:n,pipe:s,async _parse(e,t){return await this.check(e)?J(this,e,t):M(this,lt,e,t)}}}function dt(e){return{type:"symbol",expects:"symbol",async:!1,message:e,_parse(e,t){return"symbol"==typeof e?I(!0,e):M(this,dt,e,t)}}}function ht(e){return{type:"symbol",expects:"symbol",async:!0,message:e,async _parse(e,t){return"symbol"==typeof e?I(!0,e):M(this,ht,e,t)}}}function ft(e,t,r,n){const[s,i,a]=N(t,r,n);return{type:"tuple",expects:"Array",async:!1,items:e,rest:s,message:i,pipe:a,_parse(e,t){if(Array.isArray(e)){let r,n=!0;const s=[];for(let i=0;i<this.items.length;i++){const a=e[i],o=this.items[i]._parse(a,t);if(o.issues){const s={type:"tuple",origin:"value",input:e,key:i,value:a};for(const e of o.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=o.issues),t?.abortEarly){n=!1;break}}o.typed||(n=!1),s[i]=o.output}if(this.rest&&(!t?.abortEarly||!r))for(let i=this.items.length;i<e.length;i++){const a=e[i],o=this.rest._parse(a,t);if(o.issues){const s={type:"tuple",origin:"value",input:e,key:i,value:a};for(const e of o.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=o.issues),t?.abortEarly){n=!1;break}}o.typed||(n=!1),s[i]=o.output}return n?U(this,s,t,r):I(!1,s,r)}return M(this,ft,e,t)}}}function yt(e,t,r,n){const[s,i,a]=N(t,r,n);return{type:"tuple",expects:"Array",async:!0,items:e,rest:s,message:i,pipe:a,async _parse(e,t){if(Array.isArray(e)){let r,n=!0;const s=[];return await Promise.all([Promise.all(this.items.map((async(i,a)=>{if(!t?.abortEarly||!r){const o=e[a],c=await i._parse(o,t);if(!t?.abortEarly||!r){if(c.issues){const s={type:"tuple",origin:"value",input:e,key:a,value:o};for(const e of c.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=c.issues),t?.abortEarly)throw n=!1,null}c.typed||(n=!1),s[a]=c.output}}}))),this.rest&&Promise.all(e.slice(this.items.length).map((async(i,a)=>{if(!t?.abortEarly||!r){const o=this.items.length+a,c=await this.rest._parse(i,t);if(!t?.abortEarly||!r){if(c.issues){const s={type:"tuple",origin:"value",input:e,key:o,value:i};for(const e of c.issues)e.path?e.path.unshift(s):e.path=[s],r?.push(e);if(r||(r=c.issues),t?.abortEarly)throw n=!1,null}c.typed||(n=!1),s[o]=c.output}}})))]).catch((()=>null)),n?J(this,s,t,r):I(!1,s,r)}return M(this,yt,e,t)}}}function mt(e){return{type:"undefined",expects:"undefined",async:!1,message:e,_parse(e,t){return void 0===e?I(!0,e):M(this,mt,e,t)}}}var wt=mt;function gt(e){return{type:"undefined",expects:"undefined",async:!0,message:e,async _parse(e,t){return void 0===e?I(!0,e):M(this,gt,e,t)}}}var bt=gt;function Et(e){let t;if(e)for(const r of e)if(t)for(const e of r.issues)t.push(e);else t=r.issues;return t}function _t(e,t,r){const[n,s]=b(t,r);return{type:"union",expects:[...new Set(e.map((e=>e.expects)))].join(" | "),async:!1,options:e,message:n,pipe:s,_parse(e,t){let r,n,s;for(const i of this.options){const a=i._parse(e,t);if(a.typed){if(!a.issues){r=a;break}s?s.push(a):s=[a]}else n?n.push(a):n=[a]}if(r)return U(this,r.output,t);if(s?.length){const r=s[0];return U(this,r.output,t,1===s.length?r.issues:M(this,_t,e,t,{reason:"union",issues:Et(s)}).issues)}return 1===n?.length?n[0]:M(this,_t,e,t,{issues:Et(n)})}}}function vt(e,t,r){const[n,s]=b(t,r);return{type:"union",expects:[...new Set(e.map((e=>e.expects)))].join(" | "),async:!0,options:e,message:n,pipe:s,async _parse(e,t){let r,n,s;for(const i of this.options){const a=await i._parse(e,t);if(a.typed){if(!a.issues){r=a;break}s?s.push(a):s=[a]}else n?n.push(a):n=[a]}if(r)return J(this,r.output,t);if(s?.length){const r=s[0];return J(this,r.output,t,1===s.length?r.issues:M(this,vt,e,t,{reason:"union",issues:Et(s)}).issues)}return 1===n?.length?n[0]:M(this,vt,e,t,{issues:Et(n)})}}}function At(e){return{type:"unknown",expects:"unknown",async:!1,pipe:e,_parse(e,t){return U(this,e,t)}}}function St(e){return{type:"unknown",expects:"unknown",async:!0,pipe:e,async _parse(e,t){return J(this,e,t)}}}function kt(e,t,r,n){const[s,i]=b(r,n);let a;return{type:"variant",expects:"Object",async:!1,key:e,options:t,message:s,pipe:i,_parse(e,t){if(e&&"object"==typeof e){if(this.key in e||!a){let r,n;const s=i=>{for(const o of i)if("object"===o.type){const s=o.entries[this.key],i=s._parse(e[this.key],t);if(a||(r?r.push(s.expects):r=[s.expects]),!i.issues){const r=o._parse(e,t);if(!r.issues){n=r;break}(!n||!n.typed&&r.typed)&&(n=r)}}else if("variant"===o.type&&(s(o.options),n&&!n.issues))break};if(s(this.options),a=a||[...new Set(r)].join(" | "),n)return n.typed?U(this,n.output,t,n.issues):n}const r=e[this.key];return M(this,kt,r,t,{expected:a,path:[{type:"object",origin:"value",input:e,key:this.key,value:r}]})}return M(this,kt,e,t)}}}var xt=kt;function Pt(e,t,r,n){const[s,i]=b(r,n);let a;return{type:"variant",expects:"Object",async:!0,key:e,options:t,message:s,pipe:i,async _parse(e,t){if(e&&"object"==typeof e){if(this.key in e||!a){let r,n;const s=async i=>{for(const o of i)if("object"===o.type){const s=o.entries[this.key],i=await s._parse(e[this.key],t);if(a||(r?r.push(s.expects):r=[s.expects]),!i.issues){const r=await o._parse(e,t);if(!r.issues){n=r;break}(!n||!n.typed&&r.typed)&&(n=r)}}else if("variant"===o.type&&(await s(o.options),n&&!n.issues))break};if(await s(this.options),a=a||[...new Set(r)].join(" | "),n)return n.typed?J(this,n.output,t,n.issues):n}const r=e[this.key];return M(this,Pt,r,t,{expected:a,path:[{type:"object",origin:"value",input:e,key:this.key,value:r}]})}return M(this,Pt,e,t)}}}var Ct=Pt;function Ot(e){return{type:"void",expects:"void",async:!1,message:e,_parse(e,t){return void 0===e?I(!0,e):M(this,Ot,e,t)}}}var Ht=Ot;function Rt(e){return{type:"void",expects:"void",async:!0,message:e,async _parse(e,t){return void 0===e?I(!0,e):M(this,Rt,e,t)}}}var Tt=Rt;function Kt(e){return Xe(Object.keys(e.entries))}function jt(e,t,r,n){const[s,i,a]=N(t,r,n);return Fe(e.reduce(((e,t)=>({...e,...t.entries})),{}),s,i,a)}function It(e,t,r,n){const[s,i,a]=N(t,r,n);return Ge(e.reduce(((e,t)=>({...e,...t.entries})),{}),s,i,a)}function Dt(e,t,r,n,s){const[i,a,o]=N(r,n,s);return Fe(Object.entries(e.entries).reduce(((e,[r,n])=>t.includes(r)?e:{...e,[r]:n}),{}),i,a,o)}function Wt(e,t,r,n,s){const[i,a,o]=N(r,n,s);return Ge(Object.entries(e.entries).reduce(((e,[r,n])=>t.includes(r)?e:{...e,[r]:n}),{}),i,a,o)}function Ut(e,t,r){const n=e._parse(t,_(r));if(n.issues)throw new d(n.issues);return n.output}async function Jt(e,t,r){const n=await e._parse(t,_(r));if(n.issues)throw new d(n.issues);return n.output}function Nt(e,t,r,n){const[s,i,a]=N(t,r,n);return Fe(Object.entries(e.entries).reduce(((e,[t,r])=>({...e,[t]:ze(r)})),{}),s,i,a)}function Mt(e,t,r,n){const[s,i,a]=N(t,r,n);return Ge(Object.entries(e.entries).reduce(((e,[t,r])=>({...e,[t]:Ve(r)})),{}),s,i,a)}function $t(e){return{...e,_parse(t,r){const n=e._parse(t,r);return n.typed&&(n.output={...t,...n.output}),n}}}function qt(e){return{...e,async _parse(t,r){const n=await e._parse(t,r);return n.typed&&(n.output={...t,...n.output}),n}}}function Bt(e,t,r,n,s){const[i,a,o]=N(r,n,s);return Fe(Object.entries(e.entries).reduce(((e,[r,n])=>t.includes(r)?{...e,[r]:n}:e),{}),i,a,o)}function Lt(e,t,r,n,s){const[i,a,o]=N(r,n,s);return Ge(Object.entries(e.entries).reduce(((e,[r,n])=>t.includes(r)?{...e,[r]:n}:e),{}),i,a,o)}function Ft(e,t,r,n){const[s,i,a]=N(t,r,n);return Fe(Object.entries(e.entries).reduce(((e,[t,r])=>({...e,[t]:je(r)})),{}),s,i,a)}function Gt(e,t,r,n){const[s,i,a]=N(t,r,n);return Ge(Object.entries(e.entries).reduce(((e,[t,r])=>({...e,[t]:Ie(r)})),{}),s,i,a)}function zt(e,t,r){const n=e._parse(t,_(r));return{typed:n.typed,success:!n.issues,data:n.output,output:n.output,error:n.issues&&new d(n.issues),issues:n.issues}}async function Vt(e,t,r){const n=await e._parse(t,_(r));return{typed:n.typed,success:!n.issues,data:n.output,output:n.output,error:n.issues&&new d(n.issues),issues:n.issues}}function Xt(e){return{...e,_parse(t,r){const n=e._parse(t,r);return!n.issues&&Object.keys(t).some((t=>!(t in e.entries)))?M(this,Fe,t,r):n}}}function Yt(e){return{...e,async _parse(t,r){const n=await e._parse(t,r);return!n.issues&&Object.keys(t).some((t=>!(t in e.entries)))?M(this,Ge,t,r):n}}}function Zt(e){let t;return{...e,_parse(r,n){const s=e._parse(r,n);if(s.typed){t=t??Object.keys(e.entries);const r={};for(const e of t)r[e]=s.output[e];s.output=r}return s}}}function Qt(e){let t;return{...e,async _parse(r,n){const s=await e._parse(r,n);if(s.typed){t=t??Object.keys(e.entries);const r={};for(const e of t)r[e]=s.output[e];s.output=r}return s}}}function er(e,t,r){return{...e,_parse(n,s){const i=e._parse(n,s);return i.typed?(i.output=t(i.output,{issues:i.issues}),i.issues||!r?i:Array.isArray(r)?U({type:typeof i.output,pipe:r},i.output,s):r._parse(i.output,s)):i}}}function tr(e,t,r){return{...e,async:!0,async _parse(n,s){const i=await e._parse(n,s);return i.typed?(i.output=await t(i.output,{issues:i.issues}),i.issues||!r?i:Array.isArray(r)?J({type:typeof i.output,pipe:r},i.output,s):r._parse(i.output,s)):i}}}function rr(e){return e.wrapped}function nr(e,t){return{...e,_parse:(r,n)=>e._parse(void 0===r?"function"==typeof t?t():t:r,n)}}var sr=nr,ir=/^[A-Z]{6}(?!00)[A-Z\d]{2}(?:[A-Z\d]{3})?$/u,ar=/^[a-z][\da-z]*$/u,or=/^\d+$/u,cr=/^[\w+-]+(?:\.[\w+-]+)*@[\da-z]+(?:[.-][\da-z]+)*\.[a-z]{2,}$/iu,ur=/^[\p{Extended_Pictographic}\p{Emoji_Component}]+$/u,pr=/^(0h|0x)?[\da-f]+$/iu,lr=/^#([\da-f]{3}|[\da-f]{4}|[\da-f]{6}|[\da-f]{8})$/iu,dr=/^\d{2}(?:[ /|-]?\d{6}){2}[ /|-]?\d$/u,hr=/^(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])(?:\.(?:(?:[1-9]|1\d|2[0-4])?\d|25[0-5])){3}$/u,fr=/^(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:|(?:[\da-f]{1,4}:){1,6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,5}(?::[\da-f]{1,4}){1,2}|(?:[\da-f]{1,4}:){1,4}(?::[\da-f]{1,4}){1,3}|(?:[\da-f]{1,4}:){1,3}(?::[\da-f]{1,4}){1,4}|(?:[\da-f]{1,4}:){1,2}(?::[\da-f]{1,4}){1,5}|[\da-f]{1,4}:(?::[\da-f]{1,4}){1,6}|:(?:(?::[\da-f]{1,4}){1,7}|:)|fe80:(?::[\da-f]{0,4}){0,4}%[\da-z]+|::(?:f{4}(?::0{1,4})?:)?(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d)|(?:[\da-f]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1?\d)?\d)\.){3}(?:25[0-5]|(?:2[0-4]|1?\d)?\d))$/iu,yr=/^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])$/u,mr=/^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])T(?:0\d|1\d|2[0-3]):[0-5]\d$/u,wr=/^(?:0\d|1\d|2[0-3]):[0-5]\d$/u,gr=/^(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}$/u,br=/^\d{4}-(?:0[1-9]|1[0-2])-(?:[12]\d|0[1-9]|3[01])T(?:0\d|1\d|2[0-3])(?::[0-5]\d){2}(?:\.\d{1,9})?Z$/u,Er=/^\d{4}-W(?:0[1-9]|[1-4]\d|5[0-3])$/u,_r=/^(?:[\da-f]{2}:){5}[\da-f]{2}$|^(?:[\da-f]{2}-){5}[\da-f]{2}$|^(?:[\da-f]{4}\.){2}[\da-f]{4}$/iu,vr=/^(?:[\da-f]{2}:){7}[\da-f]{2}$|^(?:[\da-f]{2}-){7}[\da-f]{2}$|^(?:[\da-f]{4}\.){3}[\da-f]{4}$|^(?:[\da-f]{4}:){3}[\da-f]{4}$/iu,Ar=/^(0o)?[0-7]+$/iu,Sr=/^[\da-hjkmnp-tv-z]{26}$/iu,kr=/^[\da-f]{8}(?:-[\da-f]{4}){3}-[\da-f]{12}$/iu;function xr(e){return{type:"to_custom",async:!1,_parse:t=>g(e(t))}}function Pr(e){return{type:"to_custom",async:!0,_parse:async t=>g(await e(t))}}function Cr(){return{type:"to_lower_case",async:!1,_parse:e=>g(e.toLocaleLowerCase())}}function Or(e){return{type:"to_max_value",async:!1,requirement:e,_parse(e){return g(e>this.requirement?this.requirement:e)}}}function Hr(e){return{type:"to_min_value",async:!1,requirement:e,_parse(e){return g(e<this.requirement?this.requirement:e)}}}function Rr(){return{type:"to_trimmed",async:!1,_parse:e=>g(e.trim())}}function Tr(){return{type:"to_trimmed_end",async:!1,_parse:e=>g(e.trimEnd())}}function Kr(){return{type:"to_trimmed_start",async:!1,_parse:e=>g(e.trimStart())}}function jr(){return{type:"to_upper_case",async:!1,_parse:e=>g(e.toUpperCase())}}function Ir(e){return{type:"bic",expects:null,async:!1,message:e,requirement:ir,_parse(e){return this.requirement.test(e)?g(e):w(this,Ir,e,"BIC")}}}function Dr(e,t){return{type:"bytes",expects:`${e}`,async:!1,message:t,requirement:e,_parse(e){const t=(new TextEncoder).encode(e).length;return t===this.requirement?g(e):w(this,Dr,e,"bytes",`${t}`)}}}var Wr=/[- ]+/gu,Ur=[/^3[47]\d{13}$/u,/^3(?:0[0-5]|[68]\d)\d{11}$/u,/^6(?:011|5\d{2})\d{12,15}$/u,/^(?:2131|1800|35\d{3})\d{11}$/u,/^5[1-5]\d{2}|(222\d|22[3-9]\d|2[3-6]\d{2}|27[01]\d|2720)\d{12}$/u,/^(6[27]\d{14}|81\d{14,17})$/u,/^4\d{12}(?:\d{3,6})?$/u];function Jr(e){return{type:"credit_card",expects:null,async:!1,message:e,requirement:e=>{const t=e.replace(Wr,"");return Ur.some((e=>e.test(t)))&&j(t)},_parse(e){return this.requirement(e)?g(e):w(this,Jr,e,"credit card")}}}function Nr(e){return{type:"cuid2",expects:null,async:!1,message:e,requirement:ar,_parse(e){return this.requirement.test(e)?g(e):w(this,Nr,e,"Cuid2")}}}function Mr(e,t){return{type:"custom",expects:null,async:!1,message:t,requirement:e,_parse(e){return this.requirement(e)?g(e):w(this,Mr,e,"input")}}}function $r(e,t){return{type:"custom",expects:null,async:!0,message:t,requirement:e,async _parse(e){return await this.requirement(e)?g(e):w(this,$r,e,"input")}}}function qr(e){return{type:"decimal",expects:null,async:!1,message:e,requirement:or,_parse(e){return this.requirement.test(e)?g(e):w(this,qr,e,"decimal")}}}function Br(e){return{type:"email",expects:null,async:!1,message:e,requirement:cr,_parse(e){return this.requirement.test(e)?g(e):w(this,Br,e,"email")}}}function Lr(e){return{type:"emoji",expects:null,async:!1,message:e,requirement:ur,_parse(e){return this.requirement.test(e)?g(e):w(this,Lr,e,"emoji")}}}function Fr(e,t){return{type:"ends_with",expects:`"${e}"`,async:!1,message:t,requirement:e,_parse(e){return e.endsWith(this.requirement)?g(e):w(this,Fr,e,"end",`"${e.slice(-this.requirement.length)}"`)}}}function Gr(e,t){return{type:"equal",expects:D(e),async:!1,message:t,requirement:e,_parse(e){return e===this.requirement?g(e):w(this,Gr,e,"value")}}}function zr(e,t){const r=D(e);return{type:"excludes",expects:`!${r}`,async:!1,message:t,requirement:e,_parse(e){return e.includes(this.requirement)?w(this,zr,e,"content",r):g(e)}}}function Vr(e){return{type:"finite",expects:null,async:!1,message:e,requirement:Number.isFinite,_parse(e){return this.requirement(e)?g(e):w(this,Vr,e,"finite")}}}var Xr={md4:32,md5:32,sha1:40,sha256:64,sha384:96,sha512:128,ripemd128:32,ripemd160:40,tiger128:32,tiger160:40,tiger192:48,crc32:8,crc32b:8,adler32:8};function Yr(e,t){return{type:"hash",expects:null,async:!1,message:t,requirement:RegExp(e.map((e=>`^[a-f0-9]{${Xr[e]}}$`)).join("|"),"iu"),_parse(e){return this.requirement.test(e)?g(e):w(this,Yr,e,"hash")}}}function Zr(e){return{type:"hexadecimal",expects:null,async:!1,message:e,requirement:pr,_parse(e){return this.requirement.test(e)?g(e):w(this,Zr,e,"hexadecimal")}}}function Qr(e){return{type:"hex_color",expects:null,async:!1,message:e,requirement:lr,_parse(e){return this.requirement.test(e)?g(e):w(this,Qr,e,"hex color")}}}function en(e){return{type:"imei",expects:null,async:!1,message:e,requirement:[dr,j],_parse(e){return this.requirement[0].test(e)&&this.requirement[1](e)?g(e):w(this,en,e,"IMEI")}}}function tn(e,t){const r=D(e);return{type:"includes",expects:r,async:!1,message:t,requirement:e,_parse(e){return e.includes(this.requirement)?g(e):w(this,tn,e,"content",`!${r}`)}}}function rn(e){return{type:"integer",expects:null,async:!1,message:e,requirement:Number.isInteger,_parse(e){return this.requirement(e)?g(e):w(this,rn,e,"integer")}}}function nn(e){return{type:"ip",expects:null,async:!1,message:e,requirement:[hr,fr],_parse(e){return this.requirement[0].test(e)||this.requirement[1].test(e)?g(e):w(this,nn,e,"IP")}}}function sn(e){return{type:"ipv4",expects:null,async:!1,message:e,requirement:hr,_parse(e){return this.requirement.test(e)?g(e):w(this,sn,e,"IPv4")}}}function an(e){return{type:"ipv6",expects:null,async:!1,message:e,requirement:fr,_parse(e){return this.requirement.test(e)?g(e):w(this,an,e,"IPv6")}}}function on(e){return{type:"iso_date",expects:null,async:!1,message:e,requirement:yr,_parse(e){return this.requirement.test(e)?g(e):w(this,on,e,"date")}}}function cn(e){return{type:"iso_date_time",expects:null,async:!1,message:e,requirement:mr,_parse(e){return this.requirement.test(e)?g(e):w(this,cn,e,"date-time")}}}function un(e){return{type:"iso_time",expects:null,async:!1,message:e,requirement:wr,_parse(e){return this.requirement.test(e)?g(e):w(this,un,e,"time")}}}function pn(e){return{type:"iso_time_second",expects:null,async:!1,message:e,requirement:gr,_parse(e){return this.requirement.test(e)?g(e):w(this,pn,e,"time second")}}}function ln(e){return{type:"iso_timestamp",expects:null,async:!1,message:e,requirement:br,_parse(e){return this.requirement.test(e)?g(e):w(this,ln,e,"timestamp")}}}function dn(e){return{type:"iso_week",expects:null,async:!1,message:e,requirement:Er,_parse(e){return this.requirement.test(e)?g(e):w(this,dn,e,"week")}}}function hn(e,t){return{type:"length",expects:`${e}`,async:!1,message:t,requirement:e,_parse(e){return e.length===this.requirement?g(e):w(this,hn,e,"length",`${e.length}`)}}}function fn(e){return{type:"mac",expects:null,async:!1,message:e,requirement:[_r,vr],_parse(e){return this.requirement[0].test(e)||this.requirement[1].test(e)?g(e):w(this,fn,e,"MAC")}}}function yn(e){return{type:"mac48",expects:null,async:!1,message:e,requirement:_r,_parse(e){return this.requirement.test(e)?g(e):w(this,yn,e,"48-bit MAC")}}}function mn(e){return{type:"mac64",expects:null,async:!1,message:e,requirement:vr,_parse(e){return this.requirement.test(e)?g(e):w(this,mn,e,"64-bit MAC")}}}function wn(e,t){return{type:"max_bytes",expects:`<=${e}`,async:!1,message:t,requirement:e,_parse(e){const t=(new TextEncoder).encode(e).length;return t<=this.requirement?g(e):w(this,wn,e,"bytes",`${t}`)}}}function gn(e,t){return{type:"max_length",expects:`<=${e}`,async:!1,message:t,requirement:e,_parse(e){return e.length<=this.requirement?g(e):w(this,gn,e,"length",`${e.length}`)}}}function bn(e,t){return{type:"max_size",expects:`<=${e}`,async:!1,message:t,requirement:e,_parse(e){return e.size<=this.requirement?g(e):w(this,bn,e,"size",`${e.size}`)}}}function En(e,t){return{type:"max_value",expects:`<=${e instanceof Date?e.toJSON():D(e)}`,async:!1,message:t,requirement:e,_parse(e){return e<=this.requirement?g(e):w(this,En,e,"value",e instanceof Date?e.toJSON():D(e))}}}var _n=En;function vn(e,t){return{type:"min_bytes",expects:`>=${e}`,async:!1,message:t,requirement:e,_parse(e){const t=(new TextEncoder).encode(e).length;return t>=this.requirement?g(e):w(this,vn,e,"bytes",`${t}`)}}}function An(e,t){return{type:"mime_type",expects:e.map((e=>`"${e}"`)).join(" | "),async:!1,message:t,requirement:e,_parse(e){return this.requirement.includes(e.type)?g(e):w(this,An,e,"MIME type")}}}function Sn(e,t){return{type:"min_length",expects:`>=${e}`,async:!1,message:t,requirement:e,_parse(e){return e.length>=this.requirement?g(e):w(this,Sn,e,"length",`${e.length}`)}}}function kn(e,t){return{type:"min_size",expects:`>=${e}`,async:!1,message:t,requirement:e,_parse(e){return e.size>=this.requirement?g(e):w(this,kn,e,"size",`${e.size}`)}}}function xn(e,t){return{type:"min_value",expects:`>=${e instanceof Date?e.toJSON():D(e)}`,async:!1,message:t,requirement:e,_parse(e){return e>=this.requirement?g(e):w(this,xn,e,"value",e instanceof Date?e.toJSON():D(e))}}}var Pn=xn;function Cn(e,t){return{type:"multiple_of",expects:`%${e}`,async:!1,message:t,requirement:e,_parse(e){return e%this.requirement==0?g(e):w(this,Cn,e,"multiple",`${e}`)}}}function On(e,t){return{type:"not_bytes",expects:`!${e}`,async:!1,message:t,requirement:e,_parse(e){const t=(new TextEncoder).encode(e).length;return t!==this.requirement?g(e):w(this,On,e,"bytes",`${t}`)}}}function Hn(e,t){return{type:"not_length",expects:`!${e}`,async:!1,message:t,requirement:e,_parse(e){return e.length!==this.requirement?g(e):w(this,Hn,e,"length",`${e.length}`)}}}function Rn(e,t){return{type:"not_size",expects:`!${e}`,async:!1,message:t,requirement:e,_parse(e){return e.size!==this.requirement?g(e):w(this,Rn,e,"size",`${e.size}`)}}}function Tn(e,t){return{type:"not_value",expects:`!${e instanceof Date?e.toJSON():D(e)}`,async:!1,message:t,requirement:e,_parse(e){return e<this.requirement||e>this.requirement?g(e):w(this,Tn,e,"value",e instanceof Date?e.toJSON():D(e))}}}function Kn(e){return{type:"octal",expects:null,async:!1,message:e,requirement:Ar,_parse(e){return this.requirement.test(e)?g(e):w(this,Kn,e,"octal")}}}function jn(e,t){return{type:"regex",expects:`${e}`,async:!1,message:t,requirement:e,_parse(e){return this.requirement.test(e)?g(e):w(this,jn,e,"format")}}}function In(e){return{type:"safe_integer",expects:null,async:!1,message:e,requirement:Number.isSafeInteger,_parse(e){return this.requirement(e)?g(e):w(this,In,e,"safe integer")}}}function Dn(e,t){return{type:"size",expects:`${e}`,async:!1,message:t,requirement:e,_parse(e){return e.size===this.requirement?g(e):w(this,Dn,e,"size",`${e.size}`)}}}function Wn(e,t){return{type:"starts_with",expects:`"${e}"`,async:!1,message:t,requirement:e,_parse(e){return e.startsWith(this.requirement)?g(e):w(this,Wn,e,"start",`"${e.slice(0,this.requirement.length)}"`)}}}function Un(e){return{type:"ulid",expects:null,async:!1,message:e,requirement:Sr,_parse(e){return this.requirement.test(e)?g(e):w(this,Un,e,"ULID")}}}function Jn(e){return{type:"url",expects:null,async:!1,message:e,requirement(e){try{return new URL(e),!0}catch{return!1}},_parse(e){return this.requirement(e)?g(e):w(this,Jn,e,"URL")}}}function Nn(e){return{type:"uuid",expects:null,async:!1,message:e,requirement:kr,_parse(e){return this.requirement.test(e)?g(e):w(this,Nn,e,"UUID")}}}function Mn(e,t){return{type:"value",expects:`${e instanceof Date?e.toJSON():D(e)}`,async:!1,message:t,requirement:e,_parse(e){return e<=this.requirement&&e>=this.requirement?g(e):w(this,Mn,e,"value",e instanceof Date?e.toJSON():D(e))}}}},894:(e,t,r)=>{r.r(t),r.d(t,{CompactEncrypt:()=>st,CompactSign:()=>at,EmbeddedJWK:()=>mt,EncryptJWT:()=>dt,FlattenedEncrypt:()=>$e,FlattenedSign:()=>it,GeneralEncrypt:()=>Be,GeneralSign:()=>ct,SignJWT:()=>lt,UnsecuredJWT:()=>kt,base64url:()=>s,calculateJwkThumbprint:()=>ft,calculateJwkThumbprintUri:()=>yt,compactDecrypt:()=>je,compactVerify:()=>Ve,createLocalJWKSet:()=>_t,createRemoteJWKSet:()=>St,cryptoRuntime:()=>Kt,decodeJwt:()=>Ot,decodeProtectedHeader:()=>Ct,errors:()=>n,exportJWK:()=>Je,exportPKCS8:()=>Ue,exportSPKI:()=>We,flattenedDecrypt:()=>Ke,flattenedVerify:()=>ze,generalDecrypt:()=>Ie,generalVerify:()=>Xe,generateKeyPair:()=>Rt,generateSecret:()=>Tt,importJWK:()=>Pe,importPKCS8:()=>xe,importSPKI:()=>Se,importX509:()=>ke,jwtDecrypt:()=>nt,jwtVerify:()=>rt});var n={};r.r(n),r.d(n,{JOSEAlgNotAllowed:()=>A,JOSEError:()=>E,JOSENotSupported:()=>S,JWEDecryptionFailed:()=>k,JWEInvalid:()=>x,JWKInvalid:()=>O,JWKSInvalid:()=>H,JWKSMultipleMatchingKeys:()=>T,JWKSNoMatchingKey:()=>R,JWKSTimeout:()=>K,JWSInvalid:()=>P,JWSSignatureVerificationFailed:()=>j,JWTClaimValidationFailed:()=>_,JWTExpired:()=>v,JWTInvalid:()=>C});var s={};r.r(s),r.d(s,{decode:()=>Pt,encode:()=>xt});const i=crypto,a=e=>e instanceof CryptoKey,o=async(e,t)=>{const r=`SHA-${e.slice(-3)}`;return new Uint8Array(await i.subtle.digest(r,t))},c=new TextEncoder,u=new TextDecoder,p=2**32;function l(...e){const t=e.reduce(((e,{length:t})=>e+t),0),r=new Uint8Array(t);let n=0;for(const t of e)r.set(t,n),n+=t.length;return r}function d(e,t,r){if(t<0||t>=p)throw new RangeError(`value must be >= 0 and <= ${p-1}. Received ${t}`);e.set([t>>>24,t>>>16,t>>>8,255&t],r)}function h(e){const t=Math.floor(e/p),r=e%p,n=new Uint8Array(8);return d(n,t,0),d(n,r,4),n}function f(e){const t=new Uint8Array(4);return d(t,e),t}function y(e){return l(f(e.length),e)}const m=e=>{let t=e;"string"==typeof t&&(t=c.encode(t));const r=[];for(let e=0;e<t.length;e+=32768)r.push(String.fromCharCode.apply(null,t.subarray(e,e+32768)));return btoa(r.join(""))},w=e=>m(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_"),g=e=>{const t=atob(e),r=new Uint8Array(t.length);for(let e=0;e<t.length;e++)r[e]=t.charCodeAt(e);return r},b=e=>{let t=e;t instanceof Uint8Array&&(t=u.decode(t)),t=t.replace(/-/g,"+").replace(/_/g,"/").replace(/\s/g,"");try{return g(t)}catch{throw new TypeError("The input to be decoded is not correctly encoded.")}};class E extends Error{static get code(){return"ERR_JOSE_GENERIC"}constructor(e){super(e),this.code="ERR_JOSE_GENERIC",this.name=this.constructor.name,Error.captureStackTrace?.(this,this.constructor)}}class _ extends E{static get code(){return"ERR_JWT_CLAIM_VALIDATION_FAILED"}constructor(e,t="unspecified",r="unspecified"){super(e),this.code="ERR_JWT_CLAIM_VALIDATION_FAILED",this.claim=t,this.reason=r}}class v extends E{static get code(){return"ERR_JWT_EXPIRED"}constructor(e,t="unspecified",r="unspecified"){super(e),this.code="ERR_JWT_EXPIRED",this.claim=t,this.reason=r}}class A extends E{constructor(){super(...arguments),this.code="ERR_JOSE_ALG_NOT_ALLOWED"}static get code(){return"ERR_JOSE_ALG_NOT_ALLOWED"}}class S extends E{constructor(){super(...arguments),this.code="ERR_JOSE_NOT_SUPPORTED"}static get code(){return"ERR_JOSE_NOT_SUPPORTED"}}class k extends E{constructor(){super(...arguments),this.code="ERR_JWE_DECRYPTION_FAILED",this.message="decryption operation failed"}static get code(){return"ERR_JWE_DECRYPTION_FAILED"}}class x extends E{constructor(){super(...arguments),this.code="ERR_JWE_INVALID"}static get code(){return"ERR_JWE_INVALID"}}class P extends E{constructor(){super(...arguments),this.code="ERR_JWS_INVALID"}static get code(){return"ERR_JWS_INVALID"}}class C extends E{constructor(){super(...arguments),this.code="ERR_JWT_INVALID"}static get code(){return"ERR_JWT_INVALID"}}class O extends E{constructor(){super(...arguments),this.code="ERR_JWK_INVALID"}static get code(){return"ERR_JWK_INVALID"}}class H extends E{constructor(){super(...arguments),this.code="ERR_JWKS_INVALID"}static get code(){return"ERR_JWKS_INVALID"}}class R extends E{constructor(){super(...arguments),this.code="ERR_JWKS_NO_MATCHING_KEY",this.message="no applicable key found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_NO_MATCHING_KEY"}}class T extends E{constructor(){super(...arguments),this.code="ERR_JWKS_MULTIPLE_MATCHING_KEYS",this.message="multiple matching keys found in the JSON Web Key Set"}static get code(){return"ERR_JWKS_MULTIPLE_MATCHING_KEYS"}}Symbol.asyncIterator;class K extends E{constructor(){super(...arguments),this.code="ERR_JWKS_TIMEOUT",this.message="request timed out"}static get code(){return"ERR_JWKS_TIMEOUT"}}class j extends E{constructor(){super(...arguments),this.code="ERR_JWS_SIGNATURE_VERIFICATION_FAILED",this.message="signature verification failed"}static get code(){return"ERR_JWS_SIGNATURE_VERIFICATION_FAILED"}}const I=i.getRandomValues.bind(i);function D(e){switch(e){case"A128GCM":case"A128GCMKW":case"A192GCM":case"A192GCMKW":case"A256GCM":case"A256GCMKW":return 96;case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return 128;default:throw new S(`Unsupported JWE Algorithm: ${e}`)}}const W=e=>I(new Uint8Array(D(e)>>3)),U=(e,t)=>{if(t.length<<3!==D(e))throw new x("Invalid Initialization Vector length")},J=(e,t)=>{const r=e.byteLength<<3;if(r!==t)throw new x(`Invalid Content Encryption Key length. Expected ${t} bits, got ${r} bits`)};function N(e,t="algorithm.name"){return new TypeError(`CryptoKey does not support this operation, its ${t} must be ${e}`)}function M(e,t){return e.name===t}function $(e){return parseInt(e.name.slice(4),10)}function q(e,t){if(t.length&&!t.some((t=>e.usages.includes(t)))){let e="CryptoKey does not support this operation, its usages must include ";if(t.length>2){const r=t.pop();e+=`one of ${t.join(", ")}, or ${r}.`}else 2===t.length?e+=`one of ${t[0]} or ${t[1]}.`:e+=`${t[0]}.`;throw new TypeError(e)}}function B(e,t,...r){switch(t){case"A128GCM":case"A192GCM":case"A256GCM":{if(!M(e.algorithm,"AES-GCM"))throw N("AES-GCM");const r=parseInt(t.slice(1,4),10);if(e.algorithm.length!==r)throw N(r,"algorithm.length");break}case"A128KW":case"A192KW":case"A256KW":{if(!M(e.algorithm,"AES-KW"))throw N("AES-KW");const r=parseInt(t.slice(1,4),10);if(e.algorithm.length!==r)throw N(r,"algorithm.length");break}case"ECDH":switch(e.algorithm.name){case"ECDH":case"X25519":case"X448":break;default:throw N("ECDH, X25519, or X448")}break;case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":if(!M(e.algorithm,"PBKDF2"))throw N("PBKDF2");break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":{if(!M(e.algorithm,"RSA-OAEP"))throw N("RSA-OAEP");const r=parseInt(t.slice(9),10)||1;if($(e.algorithm.hash)!==r)throw N(`SHA-${r}`,"algorithm.hash");break}default:throw new TypeError("CryptoKey does not support this operation")}q(e,r)}function L(e,t,...r){if(r.length>2){const t=r.pop();e+=`one of type ${r.join(", ")}, or ${t}.`}else 2===r.length?e+=`one of type ${r[0]} or ${r[1]}.`:e+=`of type ${r[0]}.`;return null==t?e+=` Received ${t}`:"function"==typeof t&&t.name?e+=` Received function ${t.name}`:"object"==typeof t&&null!=t&&t.constructor?.name&&(e+=` Received an instance of ${t.constructor.name}`),e}const F=(e,...t)=>L("Key must be ",e,...t);function G(e,t,...r){return L(`Key for the ${e} algorithm must be `,t,...r)}const z=e=>a(e),V=["CryptoKey"],X=async(e,t,r,n,s,o)=>{if(!(a(t)||t instanceof Uint8Array))throw new TypeError(F(t,...V,"Uint8Array"));if(!n)throw new x("JWE Initialization Vector missing");if(!s)throw new x("JWE Authentication Tag missing");switch(U(e,n),e){case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return t instanceof Uint8Array&&J(t,parseInt(e.slice(-3),10)),async function(e,t,r,n,s,a){if(!(t instanceof Uint8Array))throw new TypeError(F(t,"Uint8Array"));const o=parseInt(e.slice(1,4),10),c=await i.subtle.importKey("raw",t.subarray(o>>3),"AES-CBC",!1,["decrypt"]),u=await i.subtle.importKey("raw",t.subarray(0,o>>3),{hash:"SHA-"+(o<<1),name:"HMAC"},!1,["sign"]),p=l(a,n,r,h(a.length<<3)),d=new Uint8Array((await i.subtle.sign("HMAC",u,p)).slice(0,o>>3));let f,y;try{f=((e,t)=>{if(!(e instanceof Uint8Array))throw new TypeError("First argument must be a buffer");if(!(t instanceof Uint8Array))throw new TypeError("Second argument must be a buffer");if(e.length!==t.length)throw new TypeError("Input buffers must have the same length");const r=e.length;let n=0,s=-1;for(;++s<r;)n|=e[s]^t[s];return 0===n})(s,d)}catch{}if(!f)throw new k;try{y=new Uint8Array(await i.subtle.decrypt({iv:n,name:"AES-CBC"},c,r))}catch{}if(!y)throw new k;return y}(e,t,r,n,s,o);case"A128GCM":case"A192GCM":case"A256GCM":return t instanceof Uint8Array&&J(t,parseInt(e.slice(1,4),10)),async function(e,t,r,n,s,a){let o;t instanceof Uint8Array?o=await i.subtle.importKey("raw",t,"AES-GCM",!1,["decrypt"]):(B(t,e,"decrypt"),o=t);try{return new Uint8Array(await i.subtle.decrypt({additionalData:a,iv:n,name:"AES-GCM",tagLength:128},o,l(r,s)))}catch{throw new k}}(e,t,r,n,s,o);default:throw new S("Unsupported JWE Content Encryption Algorithm")}},Y=(...e)=>{const t=e.filter(Boolean);if(0===t.length||1===t.length)return!0;let r;for(const e of t){const t=Object.keys(e);if(r&&0!==r.size)for(const e of t){if(r.has(e))return!1;r.add(e)}else r=new Set(t)}return!0};function Z(e){if("object"!=typeof(t=e)||null===t||"[object Object]"!==Object.prototype.toString.call(e))return!1;var t;if(null===Object.getPrototypeOf(e))return!0;let r=e;for(;null!==Object.getPrototypeOf(r);)r=Object.getPrototypeOf(r);return Object.getPrototypeOf(e)===r}const Q=[{hash:"SHA-256",name:"HMAC"},!0,["sign"]];function ee(e,t){if(e.algorithm.length!==parseInt(t.slice(1,4),10))throw new TypeError(`Invalid key size for alg: ${t}`)}function te(e,t,r){if(a(e))return B(e,t,r),e;if(e instanceof Uint8Array)return i.subtle.importKey("raw",e,"AES-KW",!0,[r]);throw new TypeError(F(e,...V,"Uint8Array"))}const re=async(e,t,r)=>{const n=await te(t,e,"wrapKey");ee(n,e);const s=await i.subtle.importKey("raw",r,...Q);return new Uint8Array(await i.subtle.wrapKey("raw",s,n,"AES-KW"))},ne=async(e,t,r)=>{const n=await te(t,e,"unwrapKey");ee(n,e);const s=await i.subtle.unwrapKey("raw",r,n,"AES-KW",...Q);return new Uint8Array(await i.subtle.exportKey("raw",s))};async function se(e,t,r,n,s=new Uint8Array(0),u=new Uint8Array(0)){if(!a(e))throw new TypeError(F(e,...V));if(B(e,"ECDH"),!a(t))throw new TypeError(F(t,...V));B(t,"ECDH","deriveBits");const p=l(y(c.encode(r)),y(s),y(u),f(n));let d;return d="X25519"===e.algorithm.name?256:"X448"===e.algorithm.name?448:Math.ceil(parseInt(e.algorithm.namedCurve.substr(-3),10)/8)<<3,async function(e,t,r){const n=Math.ceil((t>>3)/32),s=new Uint8Array(32*n);for(let t=0;t<n;t++){const n=new Uint8Array(4+e.length+r.length);n.set(f(t+1)),n.set(e,4),n.set(r,4+e.length),s.set(await o("sha256",n),32*t)}return s.slice(0,t>>3)}(new Uint8Array(await i.subtle.deriveBits({name:e.algorithm.name,public:e},t,d)),n,p)}function ie(e){if(!a(e))throw new TypeError(F(e,...V));return["P-256","P-384","P-521"].includes(e.algorithm.namedCurve)||"X25519"===e.algorithm.name||"X448"===e.algorithm.name}async function ae(e,t,r,n){!function(e){if(!(e instanceof Uint8Array)||e.length<8)throw new x("PBES2 Salt Input must be 8 or more octets")}(e);const s=function(e,t){return l(c.encode(e),new Uint8Array([0]),t)}(t,e),o=parseInt(t.slice(13,16),10),u={hash:`SHA-${t.slice(8,11)}`,iterations:r,name:"PBKDF2",salt:s},p={length:o,name:"AES-KW"},d=await function(e,t){if(e instanceof Uint8Array)return i.subtle.importKey("raw",e,"PBKDF2",!1,["deriveBits"]);if(a(e))return B(e,t,"deriveBits","deriveKey"),e;throw new TypeError(F(e,...V,"Uint8Array"))}(n,t);if(d.usages.includes("deriveBits"))return new Uint8Array(await i.subtle.deriveBits(u,d,o));if(d.usages.includes("deriveKey"))return i.subtle.deriveKey(u,d,p,!1,["wrapKey","unwrapKey"]);throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"')}function oe(e){switch(e){case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":return"RSA-OAEP";default:throw new S(`alg ${e} is not supported either by JOSE or your javascript runtime`)}}const ce=(e,t)=>{if(e.startsWith("RS")||e.startsWith("PS")){const{modulusLength:r}=t.algorithm;if("number"!=typeof r||r<2048)throw new TypeError(`${e} requires key modulusLength to be 2048 bits or larger`)}};function ue(e){switch(e){case"A128GCM":return 128;case"A192GCM":return 192;case"A256GCM":case"A128CBC-HS256":return 256;case"A192CBC-HS384":return 384;case"A256CBC-HS512":return 512;default:throw new S(`Unsupported JWE Algorithm: ${e}`)}}const pe=e=>I(new Uint8Array(ue(e)>>3)),le=(e,t)=>`-----BEGIN ${t}-----\n${(e.match(/.{1,64}/g)||[]).join("\n")}\n-----END ${t}-----`,de=async(e,t,r)=>{if(!a(r))throw new TypeError(F(r,...V));if(!r.extractable)throw new TypeError("CryptoKey is not extractable");if(r.type!==e)throw new TypeError(`key is not a ${e} key`);return le(m(new Uint8Array(await i.subtle.exportKey(t,r))),`${e.toUpperCase()} KEY`)},he=e=>de("public","spki",e),fe=e=>de("private","pkcs8",e),ye=(e,t,r=0)=>{0===r&&(t.unshift(t.length),t.unshift(6));const n=e.indexOf(t[0],r);if(-1===n)return!1;const s=e.subarray(n,n+t.length);return s.length===t.length&&(s.every(((e,r)=>e===t[r]))||ye(e,t,n+1))},me=e=>{switch(!0){case ye(e,[42,134,72,206,61,3,1,7]):return"P-256";case ye(e,[43,129,4,0,34]):return"P-384";case ye(e,[43,129,4,0,35]):return"P-521";case ye(e,[43,101,110]):return"X25519";case ye(e,[43,101,111]):return"X448";case ye(e,[43,101,112]):return"Ed25519";case ye(e,[43,101,113]):return"Ed448";default:throw new S("Invalid or unsupported EC Key Curve or OKP Key Sub Type")}},we=async(e,t,r,n,s)=>{let a,o;const c=new Uint8Array(atob(r.replace(e,"")).split("").map((e=>e.charCodeAt(0)))),u="spki"===t;switch(n){case"PS256":case"PS384":case"PS512":a={name:"RSA-PSS",hash:`SHA-${n.slice(-3)}`},o=u?["verify"]:["sign"];break;case"RS256":case"RS384":case"RS512":a={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${n.slice(-3)}`},o=u?["verify"]:["sign"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":a={name:"RSA-OAEP",hash:`SHA-${parseInt(n.slice(-3),10)||1}`},o=u?["encrypt","wrapKey"]:["decrypt","unwrapKey"];break;case"ES256":a={name:"ECDSA",namedCurve:"P-256"},o=u?["verify"]:["sign"];break;case"ES384":a={name:"ECDSA",namedCurve:"P-384"},o=u?["verify"]:["sign"];break;case"ES512":a={name:"ECDSA",namedCurve:"P-521"},o=u?["verify"]:["sign"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{const e=me(c);a=e.startsWith("P-")?{name:"ECDH",namedCurve:e}:{name:e},o=u?[]:["deriveBits"];break}case"EdDSA":a={name:me(c)},o=u?["verify"]:["sign"];break;default:throw new S('Invalid or unsupported "alg" (Algorithm) value')}return i.subtle.importKey(t,c,a,s?.extractable??!1,o)},ge=(e,t,r)=>we(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g,"pkcs8",e,t,r),be=(e,t,r)=>we(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g,"spki",e,t,r);function Ee(e){const t=[];let r=0;for(;r<e.length;){const n=_e(e.subarray(r));t.push(n),r+=n.byteLength}return t}function _e(e){let t=0,r=31&e[0];if(t++,31===r){for(r=0;e[t]>=128;)r=128*r+e[t]-128,t++;r=128*r+e[t]-128,t++}let n=0;if(e[t]<128)n=e[t],t++;else{if(128===n){for(n=0;0!==e[t+n]||0!==e[t+n+1];){if(n>e.byteLength)throw new TypeError("invalid indefinite form length");n++}const r=t+n+2;return{byteLength:r,contents:e.subarray(t,t+n),raw:e.subarray(0,r)}}{const r=127&e[t];t++,n=0;for(let s=0;s<r;s++)n=256*n+e[t],t++}}const s=t+n;return{byteLength:s,contents:e.subarray(t,s),raw:e.subarray(0,s)}}const ve=(e,t,r)=>{let n;try{n=function(e){const t=e.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g,""),r=g(t);return le(function(e){const t=Ee(Ee(_e(e).contents)[0].contents);return m(t[160===t[0].raw[0]?6:5].raw)}(r),"PUBLIC KEY")}(e)}catch(e){throw new TypeError("Failed to parse the X.509 certificate",{cause:e})}return be(n,t,r)},Ae=async e=>{if(!e.alg)throw new TypeError('"alg" argument is required when "jwk.alg" is not present');const{algorithm:t,keyUsages:r}=function(e){let t,r;switch(e.kty){case"RSA":switch(e.alg){case"PS256":case"PS384":case"PS512":t={name:"RSA-PSS",hash:`SHA-${e.alg.slice(-3)}`},r=e.d?["sign"]:["verify"];break;case"RS256":case"RS384":case"RS512":t={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${e.alg.slice(-3)}`},r=e.d?["sign"]:["verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":t={name:"RSA-OAEP",hash:`SHA-${parseInt(e.alg.slice(-3),10)||1}`},r=e.d?["decrypt","unwrapKey"]:["encrypt","wrapKey"];break;default:throw new S('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"EC":switch(e.alg){case"ES256":t={name:"ECDSA",namedCurve:"P-256"},r=e.d?["sign"]:["verify"];break;case"ES384":t={name:"ECDSA",namedCurve:"P-384"},r=e.d?["sign"]:["verify"];break;case"ES512":t={name:"ECDSA",namedCurve:"P-521"},r=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":t={name:"ECDH",namedCurve:e.crv},r=e.d?["deriveBits"]:[];break;default:throw new S('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;case"OKP":switch(e.alg){case"EdDSA":t={name:e.crv},r=e.d?["sign"]:["verify"];break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":t={name:e.crv},r=e.d?["deriveBits"]:[];break;default:throw new S('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}break;default:throw new S('Invalid or unsupported JWK "kty" (Key Type) Parameter value')}return{algorithm:t,keyUsages:r}}(e),n=[t,e.ext??!1,e.key_ops??r],s={...e};return delete s.alg,delete s.use,i.subtle.importKey("jwk",s,...n)};async function Se(e,t,r){if("string"!=typeof e||0!==e.indexOf("-----BEGIN PUBLIC KEY-----"))throw new TypeError('"spki" must be SPKI formatted string');return be(e,t,r)}async function ke(e,t,r){if("string"!=typeof e||0!==e.indexOf("-----BEGIN CERTIFICATE-----"))throw new TypeError('"x509" must be X.509 formatted string');return ve(e,t,r)}async function xe(e,t,r){if("string"!=typeof e||0!==e.indexOf("-----BEGIN PRIVATE KEY-----"))throw new TypeError('"pkcs8" must be PKCS#8 formatted string');return ge(e,t,r)}async function Pe(e,t){if(!Z(e))throw new TypeError("JWK must be an object");switch(t||(t=e.alg),e.kty){case"oct":if("string"!=typeof e.k||!e.k)throw new TypeError('missing "k" (Key Value) Parameter value');return b(e.k);case"RSA":if(void 0!==e.oth)throw new S('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');case"EC":case"OKP":return Ae({...e,alg:t});default:throw new S('Unsupported "kty" (Key Type) Parameter value')}}const Ce=(e,t,r)=>{e.startsWith("HS")||"dir"===e||e.startsWith("PBES2")||/^A\d{3}(?:GCM)?KW$/.test(e)?((e,t)=>{if(!(t instanceof Uint8Array)){if(!z(t))throw new TypeError(G(e,t,...V,"Uint8Array"));if("secret"!==t.type)throw new TypeError(`${V.join(" or ")} instances for symmetric algorithms must be of type "secret"`)}})(e,t):((e,t,r)=>{if(!z(t))throw new TypeError(G(e,t,...V));if("secret"===t.type)throw new TypeError(`${V.join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);if("sign"===r&&"public"===t.type)throw new TypeError(`${V.join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);if("decrypt"===r&&"public"===t.type)throw new TypeError(`${V.join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);if(t.algorithm&&"verify"===r&&"private"===t.type)throw new TypeError(`${V.join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);if(t.algorithm&&"encrypt"===r&&"private"===t.type)throw new TypeError(`${V.join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`)})(e,t,r)},Oe=async(e,t,r,n,s)=>{if(!(a(r)||r instanceof Uint8Array))throw new TypeError(F(r,...V,"Uint8Array"));switch(U(e,n),e){case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return r instanceof Uint8Array&&J(r,parseInt(e.slice(-3),10)),async function(e,t,r,n,s){if(!(r instanceof Uint8Array))throw new TypeError(F(r,"Uint8Array"));const a=parseInt(e.slice(1,4),10),o=await i.subtle.importKey("raw",r.subarray(a>>3),"AES-CBC",!1,["encrypt"]),c=await i.subtle.importKey("raw",r.subarray(0,a>>3),{hash:"SHA-"+(a<<1),name:"HMAC"},!1,["sign"]),u=new Uint8Array(await i.subtle.encrypt({iv:n,name:"AES-CBC"},o,t)),p=l(s,n,u,h(s.length<<3));return{ciphertext:u,tag:new Uint8Array((await i.subtle.sign("HMAC",c,p)).slice(0,a>>3))}}(e,t,r,n,s);case"A128GCM":case"A192GCM":case"A256GCM":return r instanceof Uint8Array&&J(r,parseInt(e.slice(1,4),10)),async function(e,t,r,n,s){let a;r instanceof Uint8Array?a=await i.subtle.importKey("raw",r,"AES-GCM",!1,["encrypt"]):(B(r,e,"encrypt"),a=r);const o=new Uint8Array(await i.subtle.encrypt({additionalData:s,iv:n,name:"AES-GCM",tagLength:128},a,t)),c=o.slice(-16);return{ciphertext:o.slice(0,-16),tag:c}}(e,t,r,n,s);default:throw new S("Unsupported JWE Content Encryption Algorithm")}},He=async function(e,t,r,n,s){switch(Ce(e,t,"decrypt"),e){case"dir":if(void 0!==r)throw new x("Encountered unexpected JWE Encrypted Key");return t;case"ECDH-ES":if(void 0!==r)throw new x("Encountered unexpected JWE Encrypted Key");case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{if(!Z(n.epk))throw new x('JOSE Header "epk" (Ephemeral Public Key) missing or invalid');if(!ie(t))throw new S("ECDH with the provided key is not allowed or not supported by your javascript runtime");const s=await Pe(n.epk,e);let i,a;if(void 0!==n.apu){if("string"!=typeof n.apu)throw new x('JOSE Header "apu" (Agreement PartyUInfo) invalid');try{i=b(n.apu)}catch{throw new x("Failed to base64url decode the apu")}}if(void 0!==n.apv){if("string"!=typeof n.apv)throw new x('JOSE Header "apv" (Agreement PartyVInfo) invalid');try{a=b(n.apv)}catch{throw new x("Failed to base64url decode the apv")}}const o=await se(s,t,"ECDH-ES"===e?n.enc:e,"ECDH-ES"===e?ue(n.enc):parseInt(e.slice(-5,-2),10),i,a);if("ECDH-ES"===e)return o;if(void 0===r)throw new x("JWE Encrypted Key missing");return ne(e.slice(-6),o,r)}case"RSA1_5":case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":if(void 0===r)throw new x("JWE Encrypted Key missing");return(async(e,t,r)=>{if(!a(t))throw new TypeError(F(t,...V));if(B(t,e,"decrypt","unwrapKey"),ce(e,t),t.usages.includes("decrypt"))return new Uint8Array(await i.subtle.decrypt(oe(e),t,r));if(t.usages.includes("unwrapKey")){const n=await i.subtle.unwrapKey("raw",r,t,oe(e),...Q);return new Uint8Array(await i.subtle.exportKey("raw",n))}throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation')})(e,t,r);case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":{if(void 0===r)throw new x("JWE Encrypted Key missing");if("number"!=typeof n.p2c)throw new x('JOSE Header "p2c" (PBES2 Count) missing or invalid');const i=s?.maxPBES2Count||1e4;if(n.p2c>i)throw new x('JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds');if("string"!=typeof n.p2s)throw new x('JOSE Header "p2s" (PBES2 Salt) missing or invalid');let a;try{a=b(n.p2s)}catch{throw new x("Failed to base64url decode the p2s")}return(async(e,t,r,n,s)=>{const i=await ae(s,e,n,t);return ne(e.slice(-6),i,r)})(e,t,r,n.p2c,a)}case"A128KW":case"A192KW":case"A256KW":if(void 0===r)throw new x("JWE Encrypted Key missing");return ne(e,t,r);case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":{if(void 0===r)throw new x("JWE Encrypted Key missing");if("string"!=typeof n.iv)throw new x('JOSE Header "iv" (Initialization Vector) missing or invalid');if("string"!=typeof n.tag)throw new x('JOSE Header "tag" (Authentication Tag) missing or invalid');let s,i;try{s=b(n.iv)}catch{throw new x("Failed to base64url decode the iv")}try{i=b(n.tag)}catch{throw new x("Failed to base64url decode the tag")}return async function(e,t,r,n,s){const i=e.slice(0,7);return X(i,t,r,n,s,new Uint8Array(0))}(e,t,r,s,i)}default:throw new S('Invalid or unsupported "alg" (JWE Algorithm) header value')}},Re=function(e,t,r,n,s){if(void 0!==s.crit&&void 0===n.crit)throw new e('"crit" (Critical) Header Parameter MUST be integrity protected');if(!n||void 0===n.crit)return new Set;if(!Array.isArray(n.crit)||0===n.crit.length||n.crit.some((e=>"string"!=typeof e||0===e.length)))throw new e('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');let i;i=void 0!==r?new Map([...Object.entries(r),...t.entries()]):t;for(const t of n.crit){if(!i.has(t))throw new S(`Extension Header Parameter "${t}" is not recognized`);if(void 0===s[t])throw new e(`Extension Header Parameter "${t}" is missing`);if(i.get(t)&&void 0===n[t])throw new e(`Extension Header Parameter "${t}" MUST be integrity protected`)}return new Set(n.crit)},Te=(e,t)=>{if(void 0!==t&&(!Array.isArray(t)||t.some((e=>"string"!=typeof e))))throw new TypeError(`"${e}" option must be an array of strings`);if(t)return new Set(t)};async function Ke(e,t,r){if(!Z(e))throw new x("Flattened JWE must be an object");if(void 0===e.protected&&void 0===e.header&&void 0===e.unprotected)throw new x("JOSE Header missing");if(void 0!==e.iv&&"string"!=typeof e.iv)throw new x("JWE Initialization Vector incorrect type");if("string"!=typeof e.ciphertext)throw new x("JWE Ciphertext missing or incorrect type");if(void 0!==e.tag&&"string"!=typeof e.tag)throw new x("JWE Authentication Tag incorrect type");if(void 0!==e.protected&&"string"!=typeof e.protected)throw new x("JWE Protected Header incorrect type");if(void 0!==e.encrypted_key&&"string"!=typeof e.encrypted_key)throw new x("JWE Encrypted Key incorrect type");if(void 0!==e.aad&&"string"!=typeof e.aad)throw new x("JWE AAD incorrect type");if(void 0!==e.header&&!Z(e.header))throw new x("JWE Shared Unprotected Header incorrect type");if(void 0!==e.unprotected&&!Z(e.unprotected))throw new x("JWE Per-Recipient Unprotected Header incorrect type");let n;if(e.protected)try{const t=b(e.protected);n=JSON.parse(u.decode(t))}catch{throw new x("JWE Protected Header is invalid")}if(!Y(n,e.header,e.unprotected))throw new x("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");const s={...n,...e.header,...e.unprotected};if(Re(x,new Map,r?.crit,n,s),void 0!==s.zip)throw new S('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');const{alg:i,enc:a}=s;if("string"!=typeof i||!i)throw new x("missing JWE Algorithm (alg) in JWE Header");if("string"!=typeof a||!a)throw new x("missing JWE Encryption Algorithm (enc) in JWE Header");const o=r&&Te("keyManagementAlgorithms",r.keyManagementAlgorithms),p=r&&Te("contentEncryptionAlgorithms",r.contentEncryptionAlgorithms);if(o&&!o.has(i)||!o&&i.startsWith("PBES2"))throw new A('"alg" (Algorithm) Header Parameter value not allowed');if(p&&!p.has(a))throw new A('"enc" (Encryption Algorithm) Header Parameter value not allowed');let d;if(void 0!==e.encrypted_key)try{d=b(e.encrypted_key)}catch{throw new x("Failed to base64url decode the encrypted_key")}let h,f,y,m=!1;"function"==typeof t&&(t=await t(n,e),m=!0);try{h=await He(i,t,d,s,r)}catch(e){if(e instanceof TypeError||e instanceof x||e instanceof S)throw e;h=pe(a)}if(void 0!==e.iv)try{f=b(e.iv)}catch{throw new x("Failed to base64url decode the iv")}if(void 0!==e.tag)try{y=b(e.tag)}catch{throw new x("Failed to base64url decode the tag")}const w=c.encode(e.protected??"");let g,E;g=void 0!==e.aad?l(w,c.encode("."),c.encode(e.aad)):w;try{E=b(e.ciphertext)}catch{throw new x("Failed to base64url decode the ciphertext")}const _={plaintext:await X(a,h,E,f,y,g)};if(void 0!==e.protected&&(_.protectedHeader=n),void 0!==e.aad)try{_.additionalAuthenticatedData=b(e.aad)}catch{throw new x("Failed to base64url decode the aad")}return void 0!==e.unprotected&&(_.sharedUnprotectedHeader=e.unprotected),void 0!==e.header&&(_.unprotectedHeader=e.header),m?{..._,key:t}:_}async function je(e,t,r){if(e instanceof Uint8Array&&(e=u.decode(e)),"string"!=typeof e)throw new x("Compact JWE must be a string or Uint8Array");const{0:n,1:s,2:i,3:a,4:o,length:c}=e.split(".");if(5!==c)throw new x("Invalid Compact JWE");const p=await Ke({ciphertext:a,iv:i||void 0,protected:n,tag:o||void 0,encrypted_key:s||void 0},t,r),l={plaintext:p.plaintext,protectedHeader:p.protectedHeader};return"function"==typeof t?{...l,key:p.key}:l}async function Ie(e,t,r){if(!Z(e))throw new x("General JWE must be an object");if(!Array.isArray(e.recipients)||!e.recipients.every(Z))throw new x("JWE Recipients missing or incorrect type");if(!e.recipients.length)throw new x("JWE Recipients has no members");for(const n of e.recipients)try{return await Ke({aad:e.aad,ciphertext:e.ciphertext,encrypted_key:n.encrypted_key,header:n.header,iv:e.iv,protected:e.protected,tag:e.tag,unprotected:e.unprotected},t,r)}catch{}throw new k}const De=async e=>{if(e instanceof Uint8Array)return{kty:"oct",k:w(e)};if(!a(e))throw new TypeError(F(e,...V,"Uint8Array"));if(!e.extractable)throw new TypeError("non-extractable CryptoKey cannot be exported as a JWK");const{ext:t,key_ops:r,alg:n,use:s,...o}=await i.subtle.exportKey("jwk",e);return o};async function We(e){return he(e)}async function Ue(e){return fe(e)}async function Je(e){return De(e)}const Ne=async function(e,t,r,n,s={}){let o,c,u;switch(Ce(e,r,"encrypt"),e){case"dir":u=r;break;case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{if(!ie(r))throw new S("ECDH with the provided key is not allowed or not supported by your javascript runtime");const{apu:p,apv:l}=s;let{epk:d}=s;d||(d=(await async function(e){if(!a(e))throw new TypeError(F(e,...V));return i.subtle.generateKey(e.algorithm,!0,["deriveBits"])}(r)).privateKey);const{x:h,y:f,crv:y,kty:m}=await Je(d),g=await se(r,d,"ECDH-ES"===e?t:e,"ECDH-ES"===e?ue(t):parseInt(e.slice(-5,-2),10),p,l);if(c={epk:{x:h,crv:y,kty:m}},"EC"===m&&(c.epk.y=f),p&&(c.apu=w(p)),l&&(c.apv=w(l)),"ECDH-ES"===e){u=g;break}u=n||pe(t);const b=e.slice(-6);o=await re(b,g,u);break}case"RSA1_5":case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":u=n||pe(t),o=await(async(e,t,r)=>{if(!a(t))throw new TypeError(F(t,...V));if(B(t,e,"encrypt","wrapKey"),ce(e,t),t.usages.includes("encrypt"))return new Uint8Array(await i.subtle.encrypt(oe(e),t,r));if(t.usages.includes("wrapKey")){const n=await i.subtle.importKey("raw",r,...Q);return new Uint8Array(await i.subtle.wrapKey("raw",n,t,oe(e)))}throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation')})(e,r,u);break;case"PBES2-HS256+A128KW":case"PBES2-HS384+A192KW":case"PBES2-HS512+A256KW":{u=n||pe(t);const{p2c:i,p2s:a}=s;({encryptedKey:o,...c}=await(async(e,t,r,n=2048,s=I(new Uint8Array(16)))=>{const i=await ae(s,e,n,t);return{encryptedKey:await re(e.slice(-6),i,r),p2c:n,p2s:w(s)}})(e,r,u,i,a));break}case"A128KW":case"A192KW":case"A256KW":u=n||pe(t),o=await re(e,r,u);break;case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":{u=n||pe(t);const{iv:i}=s;({encryptedKey:o,...c}=await async function(e,t,r,n){const s=e.slice(0,7);n||(n=W(s));const{ciphertext:i,tag:a}=await Oe(s,r,t,n,new Uint8Array(0));return{encryptedKey:i,iv:w(n),tag:w(a)}}(e,r,u,i));break}default:throw new S('Invalid or unsupported "alg" (JWE Algorithm) header value')}return{cek:u,encryptedKey:o,parameters:c}},Me=Symbol();class $e{constructor(e){if(!(e instanceof Uint8Array))throw new TypeError("plaintext must be an instance of Uint8Array");this._plaintext=e}setKeyManagementParameters(e){if(this._keyManagementParameters)throw new TypeError("setKeyManagementParameters can only be called once");return this._keyManagementParameters=e,this}setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setSharedUnprotectedHeader(e){if(this._sharedUnprotectedHeader)throw new TypeError("setSharedUnprotectedHeader can only be called once");return this._sharedUnprotectedHeader=e,this}setUnprotectedHeader(e){if(this._unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this._unprotectedHeader=e,this}setAdditionalAuthenticatedData(e){return this._aad=e,this}setContentEncryptionKey(e){if(this._cek)throw new TypeError("setContentEncryptionKey can only be called once");return this._cek=e,this}setInitializationVector(e){if(this._iv)throw new TypeError("setInitializationVector can only be called once");return this._iv=e,this}async encrypt(e,t){if(!this._protectedHeader&&!this._unprotectedHeader&&!this._sharedUnprotectedHeader)throw new x("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");if(!Y(this._protectedHeader,this._unprotectedHeader,this._sharedUnprotectedHeader))throw new x("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");const r={...this._protectedHeader,...this._unprotectedHeader,...this._sharedUnprotectedHeader};if(Re(x,new Map,t?.crit,this._protectedHeader,r),void 0!==r.zip)throw new S('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');const{alg:n,enc:s}=r;if("string"!=typeof n||!n)throw new x('JWE "alg" (Algorithm) Header Parameter missing or invalid');if("string"!=typeof s||!s)throw new x('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');let i,a,o,p,d;if("dir"===n){if(this._cek)throw new TypeError("setContentEncryptionKey cannot be called when using Direct Encryption")}else if("ECDH-ES"===n&&this._cek)throw new TypeError("setContentEncryptionKey cannot be called when using Direct Key Agreement");{let r;({cek:a,encryptedKey:i,parameters:r}=await Ne(n,s,e,this._cek,this._keyManagementParameters)),r&&(t&&Me in t?this._unprotectedHeader?this._unprotectedHeader={...this._unprotectedHeader,...r}:this.setUnprotectedHeader(r):this._protectedHeader?this._protectedHeader={...this._protectedHeader,...r}:this.setProtectedHeader(r))}this._iv||(this._iv=W(s)),p=this._protectedHeader?c.encode(w(JSON.stringify(this._protectedHeader))):c.encode(""),this._aad?(d=w(this._aad),o=l(p,c.encode("."),c.encode(d))):o=p;const{ciphertext:h,tag:f}=await Oe(s,this._plaintext,a,this._iv,o),y={ciphertext:w(h),iv:w(this._iv),tag:w(f)};return i&&(y.encrypted_key=w(i)),d&&(y.aad=d),this._protectedHeader&&(y.protected=u.decode(p)),this._sharedUnprotectedHeader&&(y.unprotected=this._sharedUnprotectedHeader),this._unprotectedHeader&&(y.header=this._unprotectedHeader),y}}class qe{constructor(e,t,r){this.parent=e,this.key=t,this.options=r}setUnprotectedHeader(e){if(this.unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this.unprotectedHeader=e,this}addRecipient(...e){return this.parent.addRecipient(...e)}encrypt(...e){return this.parent.encrypt(...e)}done(){return this.parent}}class Be{constructor(e){this._recipients=[],this._plaintext=e}addRecipient(e,t){const r=new qe(this,e,{crit:t?.crit});return this._recipients.push(r),r}setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setSharedUnprotectedHeader(e){if(this._unprotectedHeader)throw new TypeError("setSharedUnprotectedHeader can only be called once");return this._unprotectedHeader=e,this}setAdditionalAuthenticatedData(e){return this._aad=e,this}async encrypt(){if(!this._recipients.length)throw new x("at least one recipient must be added");if(1===this._recipients.length){const[e]=this._recipients,t=await new $e(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(e.unprotectedHeader).encrypt(e.key,{...e.options}),r={ciphertext:t.ciphertext,iv:t.iv,recipients:[{}],tag:t.tag};return t.aad&&(r.aad=t.aad),t.protected&&(r.protected=t.protected),t.unprotected&&(r.unprotected=t.unprotected),t.encrypted_key&&(r.recipients[0].encrypted_key=t.encrypted_key),t.header&&(r.recipients[0].header=t.header),r}let e;for(let t=0;t<this._recipients.length;t++){const r=this._recipients[t];if(!Y(this._protectedHeader,this._unprotectedHeader,r.unprotectedHeader))throw new x("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");const n={...this._protectedHeader,...this._unprotectedHeader,...r.unprotectedHeader},{alg:s}=n;if("string"!=typeof s||!s)throw new x('JWE "alg" (Algorithm) Header Parameter missing or invalid');if("dir"===s||"ECDH-ES"===s)throw new x('"dir" and "ECDH-ES" alg may only be used with a single recipient');if("string"!=typeof n.enc||!n.enc)throw new x('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');if(e){if(e!==n.enc)throw new x('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients')}else e=n.enc;if(Re(x,new Map,r.options.crit,this._protectedHeader,n),void 0!==n.zip)throw new S('JWE "zip" (Compression Algorithm) Header Parameter is not supported.')}const t=pe(e),r={ciphertext:"",iv:"",recipients:[],tag:""};for(let n=0;n<this._recipients.length;n++){const s=this._recipients[n],i={};r.recipients.push(i);const a={...this._protectedHeader,...this._unprotectedHeader,...s.unprotectedHeader}.alg.startsWith("PBES2")?2048+n:void 0;if(0===n){const e=await new $e(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(t).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(s.unprotectedHeader).setKeyManagementParameters({p2c:a}).encrypt(s.key,{...s.options,[Me]:!0});r.ciphertext=e.ciphertext,r.iv=e.iv,r.tag=e.tag,e.aad&&(r.aad=e.aad),e.protected&&(r.protected=e.protected),e.unprotected&&(r.unprotected=e.unprotected),i.encrypted_key=e.encrypted_key,e.header&&(i.header=e.header);continue}const{encryptedKey:o,parameters:c}=await Ne(s.unprotectedHeader?.alg||this._protectedHeader?.alg||this._unprotectedHeader?.alg,e,s.key,t,{p2c:a});i.encrypted_key=w(o),(s.unprotectedHeader||c)&&(i.header={...s.unprotectedHeader,...c})}return r}}function Le(e,t){const r=`SHA-${e.slice(-3)}`;switch(e){case"HS256":case"HS384":case"HS512":return{hash:r,name:"HMAC"};case"PS256":case"PS384":case"PS512":return{hash:r,name:"RSA-PSS",saltLength:e.slice(-3)>>3};case"RS256":case"RS384":case"RS512":return{hash:r,name:"RSASSA-PKCS1-v1_5"};case"ES256":case"ES384":case"ES512":return{hash:r,name:"ECDSA",namedCurve:t.namedCurve};case"EdDSA":return{name:t.name};default:throw new S(`alg ${e} is not supported either by JOSE or your javascript runtime`)}}function Fe(e,t,r){if(a(t))return function(e,t,...r){switch(t){case"HS256":case"HS384":case"HS512":{if(!M(e.algorithm,"HMAC"))throw N("HMAC");const r=parseInt(t.slice(2),10);if($(e.algorithm.hash)!==r)throw N(`SHA-${r}`,"algorithm.hash");break}case"RS256":case"RS384":case"RS512":{if(!M(e.algorithm,"RSASSA-PKCS1-v1_5"))throw N("RSASSA-PKCS1-v1_5");const r=parseInt(t.slice(2),10);if($(e.algorithm.hash)!==r)throw N(`SHA-${r}`,"algorithm.hash");break}case"PS256":case"PS384":case"PS512":{if(!M(e.algorithm,"RSA-PSS"))throw N("RSA-PSS");const r=parseInt(t.slice(2),10);if($(e.algorithm.hash)!==r)throw N(`SHA-${r}`,"algorithm.hash");break}case"EdDSA":if("Ed25519"!==e.algorithm.name&&"Ed448"!==e.algorithm.name)throw N("Ed25519 or Ed448");break;case"ES256":case"ES384":case"ES512":{if(!M(e.algorithm,"ECDSA"))throw N("ECDSA");const r=function(e){switch(e){case"ES256":return"P-256";case"ES384":return"P-384";case"ES512":return"P-521";default:throw new Error("unreachable")}}(t);if(e.algorithm.namedCurve!==r)throw N(r,"algorithm.namedCurve");break}default:throw new TypeError("CryptoKey does not support this operation")}q(e,r)}(t,e,r),t;if(t instanceof Uint8Array){if(!e.startsWith("HS"))throw new TypeError(F(t,...V));return i.subtle.importKey("raw",t,{hash:`SHA-${e.slice(-3)}`,name:"HMAC"},!1,[r])}throw new TypeError(F(t,...V,"Uint8Array"))}const Ge=async(e,t,r,n)=>{const s=await Fe(e,t,"verify");ce(e,s);const a=Le(e,s.algorithm);try{return await i.subtle.verify(a,s,r,n)}catch{return!1}};async function ze(e,t,r){if(!Z(e))throw new P("Flattened JWS must be an object");if(void 0===e.protected&&void 0===e.header)throw new P('Flattened JWS must have either of the "protected" or "header" members');if(void 0!==e.protected&&"string"!=typeof e.protected)throw new P("JWS Protected Header incorrect type");if(void 0===e.payload)throw new P("JWS Payload missing");if("string"!=typeof e.signature)throw new P("JWS Signature missing or incorrect type");if(void 0!==e.header&&!Z(e.header))throw new P("JWS Unprotected Header incorrect type");let n={};if(e.protected)try{const t=b(e.protected);n=JSON.parse(u.decode(t))}catch{throw new P("JWS Protected Header is invalid")}if(!Y(n,e.header))throw new P("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const s={...n,...e.header};let i=!0;if(Re(P,new Map([["b64",!0]]),r?.crit,n,s).has("b64")&&(i=n.b64,"boolean"!=typeof i))throw new P('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:a}=s;if("string"!=typeof a||!a)throw new P('JWS "alg" (Algorithm) Header Parameter missing or invalid');const o=r&&Te("algorithms",r.algorithms);if(o&&!o.has(a))throw new A('"alg" (Algorithm) Header Parameter value not allowed');if(i){if("string"!=typeof e.payload)throw new P("JWS Payload must be a string")}else if("string"!=typeof e.payload&&!(e.payload instanceof Uint8Array))throw new P("JWS Payload must be a string or an Uint8Array instance");let p=!1;"function"==typeof t&&(t=await t(n,e),p=!0),Ce(a,t,"verify");const d=l(c.encode(e.protected??""),c.encode("."),"string"==typeof e.payload?c.encode(e.payload):e.payload);let h,f;try{h=b(e.signature)}catch{throw new P("Failed to base64url decode the signature")}if(!await Ge(a,t,h,d))throw new j;if(i)try{f=b(e.payload)}catch{throw new P("Failed to base64url decode the payload")}else f="string"==typeof e.payload?c.encode(e.payload):e.payload;const y={payload:f};return void 0!==e.protected&&(y.protectedHeader=n),void 0!==e.header&&(y.unprotectedHeader=e.header),p?{...y,key:t}:y}async function Ve(e,t,r){if(e instanceof Uint8Array&&(e=u.decode(e)),"string"!=typeof e)throw new P("Compact JWS must be a string or Uint8Array");const{0:n,1:s,2:i,length:a}=e.split(".");if(3!==a)throw new P("Invalid Compact JWS");const o=await ze({payload:s,protected:n,signature:i},t,r),c={payload:o.payload,protectedHeader:o.protectedHeader};return"function"==typeof t?{...c,key:o.key}:c}async function Xe(e,t,r){if(!Z(e))throw new P("General JWS must be an object");if(!Array.isArray(e.signatures)||!e.signatures.every(Z))throw new P("JWS Signatures missing or incorrect type");for(const n of e.signatures)try{return await ze({header:n.header,payload:e.payload,protected:n.protected,signature:n.signature},t,r)}catch{}throw new j}const Ye=e=>Math.floor(e.getTime()/1e3),Ze=/^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i,Qe=e=>{const t=Ze.exec(e);if(!t||t[4]&&t[1])throw new TypeError("Invalid time period format");const r=parseFloat(t[2]);let n;switch(t[3].toLowerCase()){case"sec":case"secs":case"second":case"seconds":case"s":n=Math.round(r);break;case"minute":case"minutes":case"min":case"mins":case"m":n=Math.round(60*r);break;case"hour":case"hours":case"hr":case"hrs":case"h":n=Math.round(3600*r);break;case"day":case"days":case"d":n=Math.round(86400*r);break;case"week":case"weeks":case"w":n=Math.round(604800*r);break;default:n=Math.round(31557600*r)}return"-"===t[1]||"ago"===t[4]?-n:n},et=e=>e.toLowerCase().replace(/^application\//,""),tt=(e,t,r={})=>{const{typ:n}=r;if(n&&("string"!=typeof e.typ||et(e.typ)!==et(n)))throw new _('unexpected "typ" JWT header value',"typ","check_failed");let s;try{s=JSON.parse(u.decode(t))}catch{}if(!Z(s))throw new C("JWT Claims Set must be a top-level JSON object");const{requiredClaims:i=[],issuer:a,subject:o,audience:c,maxTokenAge:p}=r,l=[...i];void 0!==p&&l.push("iat"),void 0!==c&&l.push("aud"),void 0!==o&&l.push("sub"),void 0!==a&&l.push("iss");for(const e of new Set(l.reverse()))if(!(e in s))throw new _(`missing required "${e}" claim`,e,"missing");if(a&&!(Array.isArray(a)?a:[a]).includes(s.iss))throw new _('unexpected "iss" claim value',"iss","check_failed");if(o&&s.sub!==o)throw new _('unexpected "sub" claim value',"sub","check_failed");if(c&&(h="string"==typeof c?[c]:c,!("string"==typeof(d=s.aud)?h.includes(d):Array.isArray(d)&&h.some(Set.prototype.has.bind(new Set(d))))))throw new _('unexpected "aud" claim value',"aud","check_failed");var d,h;let f;switch(typeof r.clockTolerance){case"string":f=Qe(r.clockTolerance);break;case"number":f=r.clockTolerance;break;case"undefined":f=0;break;default:throw new TypeError("Invalid clockTolerance option type")}const{currentDate:y}=r,m=Ye(y||new Date);if((void 0!==s.iat||p)&&"number"!=typeof s.iat)throw new _('"iat" claim must be a number',"iat","invalid");if(void 0!==s.nbf){if("number"!=typeof s.nbf)throw new _('"nbf" claim must be a number',"nbf","invalid");if(s.nbf>m+f)throw new _('"nbf" claim timestamp check failed',"nbf","check_failed")}if(void 0!==s.exp){if("number"!=typeof s.exp)throw new _('"exp" claim must be a number',"exp","invalid");if(s.exp<=m-f)throw new v('"exp" claim timestamp check failed',"exp","check_failed")}if(p){const e=m-s.iat;if(e-f>("number"==typeof p?p:Qe(p)))throw new v('"iat" claim timestamp check failed (too far in the past)',"iat","check_failed");if(e<0-f)throw new _('"iat" claim timestamp check failed (it should be in the past)',"iat","check_failed")}return s};async function rt(e,t,r){const n=await Ve(e,t,r);if(n.protectedHeader.crit?.includes("b64")&&!1===n.protectedHeader.b64)throw new C("JWTs MUST NOT use unencoded payload");const s={payload:tt(n.protectedHeader,n.payload,r),protectedHeader:n.protectedHeader};return"function"==typeof t?{...s,key:n.key}:s}async function nt(e,t,r){const n=await je(e,t,r),s=tt(n.protectedHeader,n.plaintext,r),{protectedHeader:i}=n;if(void 0!==i.iss&&i.iss!==s.iss)throw new _('replicated "iss" claim header parameter mismatch',"iss","mismatch");if(void 0!==i.sub&&i.sub!==s.sub)throw new _('replicated "sub" claim header parameter mismatch',"sub","mismatch");if(void 0!==i.aud&&JSON.stringify(i.aud)!==JSON.stringify(s.aud))throw new _('replicated "aud" claim header parameter mismatch',"aud","mismatch");const a={payload:s,protectedHeader:i};return"function"==typeof t?{...a,key:n.key}:a}class st{constructor(e){this._flattened=new $e(e)}setContentEncryptionKey(e){return this._flattened.setContentEncryptionKey(e),this}setInitializationVector(e){return this._flattened.setInitializationVector(e),this}setProtectedHeader(e){return this._flattened.setProtectedHeader(e),this}setKeyManagementParameters(e){return this._flattened.setKeyManagementParameters(e),this}async encrypt(e,t){const r=await this._flattened.encrypt(e,t);return[r.protected,r.encrypted_key,r.iv,r.ciphertext,r.tag].join(".")}}class it{constructor(e){if(!(e instanceof Uint8Array))throw new TypeError("payload must be an instance of Uint8Array");this._payload=e}setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setUnprotectedHeader(e){if(this._unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this._unprotectedHeader=e,this}async sign(e,t){if(!this._protectedHeader&&!this._unprotectedHeader)throw new P("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");if(!Y(this._protectedHeader,this._unprotectedHeader))throw new P("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");const r={...this._protectedHeader,...this._unprotectedHeader};let n=!0;if(Re(P,new Map([["b64",!0]]),t?.crit,this._protectedHeader,r).has("b64")&&(n=this._protectedHeader.b64,"boolean"!=typeof n))throw new P('The "b64" (base64url-encode payload) Header Parameter must be a boolean');const{alg:s}=r;if("string"!=typeof s||!s)throw new P('JWS "alg" (Algorithm) Header Parameter missing or invalid');Ce(s,e,"sign");let a,o=this._payload;n&&(o=c.encode(w(o))),a=this._protectedHeader?c.encode(w(JSON.stringify(this._protectedHeader))):c.encode("");const p=l(a,c.encode("."),o),d=await(async(e,t,r)=>{const n=await Fe(e,t,"sign");ce(e,n);const s=await i.subtle.sign(Le(e,n.algorithm),n,r);return new Uint8Array(s)})(s,e,p),h={signature:w(d),payload:""};return n&&(h.payload=u.decode(o)),this._unprotectedHeader&&(h.header=this._unprotectedHeader),this._protectedHeader&&(h.protected=u.decode(a)),h}}class at{constructor(e){this._flattened=new it(e)}setProtectedHeader(e){return this._flattened.setProtectedHeader(e),this}async sign(e,t){const r=await this._flattened.sign(e,t);if(void 0===r.payload)throw new TypeError("use the flattened module for creating JWS with b64: false");return`${r.protected}.${r.payload}.${r.signature}`}}class ot{constructor(e,t,r){this.parent=e,this.key=t,this.options=r}setProtectedHeader(e){if(this.protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this.protectedHeader=e,this}setUnprotectedHeader(e){if(this.unprotectedHeader)throw new TypeError("setUnprotectedHeader can only be called once");return this.unprotectedHeader=e,this}addSignature(...e){return this.parent.addSignature(...e)}sign(...e){return this.parent.sign(...e)}done(){return this.parent}}class ct{constructor(e){this._signatures=[],this._payload=e}addSignature(e,t){const r=new ot(this,e,t);return this._signatures.push(r),r}async sign(){if(!this._signatures.length)throw new P("at least one signature must be added");const e={signatures:[],payload:""};for(let t=0;t<this._signatures.length;t++){const r=this._signatures[t],n=new it(this._payload);n.setProtectedHeader(r.protectedHeader),n.setUnprotectedHeader(r.unprotectedHeader);const{payload:s,...i}=await n.sign(r.key,r.options);if(0===t)e.payload=s;else if(e.payload!==s)throw new P("inconsistent use of JWS Unencoded Payload (RFC7797)");e.signatures.push(i)}return e}}function ut(e,t){if(!Number.isFinite(t))throw new TypeError(`Invalid ${e} input`);return t}class pt{constructor(e={}){if(!Z(e))throw new TypeError("JWT Claims Set MUST be an object");this._payload=e}setIssuer(e){return this._payload={...this._payload,iss:e},this}setSubject(e){return this._payload={...this._payload,sub:e},this}setAudience(e){return this._payload={...this._payload,aud:e},this}setJti(e){return this._payload={...this._payload,jti:e},this}setNotBefore(e){return"number"==typeof e?this._payload={...this._payload,nbf:ut("setNotBefore",e)}:e instanceof Date?this._payload={...this._payload,nbf:ut("setNotBefore",Ye(e))}:this._payload={...this._payload,nbf:Ye(new Date)+Qe(e)},this}setExpirationTime(e){return"number"==typeof e?this._payload={...this._payload,exp:ut("setExpirationTime",e)}:e instanceof Date?this._payload={...this._payload,exp:ut("setExpirationTime",Ye(e))}:this._payload={...this._payload,exp:Ye(new Date)+Qe(e)},this}setIssuedAt(e){return void 0===e?this._payload={...this._payload,iat:Ye(new Date)}:e instanceof Date?this._payload={...this._payload,iat:ut("setIssuedAt",Ye(e))}:this._payload="string"==typeof e?{...this._payload,iat:ut("setIssuedAt",Ye(new Date)+Qe(e))}:{...this._payload,iat:ut("setIssuedAt",e)},this}}class lt extends pt{setProtectedHeader(e){return this._protectedHeader=e,this}async sign(e,t){const r=new at(c.encode(JSON.stringify(this._payload)));if(r.setProtectedHeader(this._protectedHeader),Array.isArray(this._protectedHeader?.crit)&&this._protectedHeader.crit.includes("b64")&&!1===this._protectedHeader.b64)throw new C("JWTs MUST NOT use unencoded payload");return r.sign(e,t)}}class dt extends pt{setProtectedHeader(e){if(this._protectedHeader)throw new TypeError("setProtectedHeader can only be called once");return this._protectedHeader=e,this}setKeyManagementParameters(e){if(this._keyManagementParameters)throw new TypeError("setKeyManagementParameters can only be called once");return this._keyManagementParameters=e,this}setContentEncryptionKey(e){if(this._cek)throw new TypeError("setContentEncryptionKey can only be called once");return this._cek=e,this}setInitializationVector(e){if(this._iv)throw new TypeError("setInitializationVector can only be called once");return this._iv=e,this}replicateIssuerAsHeader(){return this._replicateIssuerAsHeader=!0,this}replicateSubjectAsHeader(){return this._replicateSubjectAsHeader=!0,this}replicateAudienceAsHeader(){return this._replicateAudienceAsHeader=!0,this}async encrypt(e,t){const r=new st(c.encode(JSON.stringify(this._payload)));return this._replicateIssuerAsHeader&&(this._protectedHeader={...this._protectedHeader,iss:this._payload.iss}),this._replicateSubjectAsHeader&&(this._protectedHeader={...this._protectedHeader,sub:this._payload.sub}),this._replicateAudienceAsHeader&&(this._protectedHeader={...this._protectedHeader,aud:this._payload.aud}),r.setProtectedHeader(this._protectedHeader),this._iv&&r.setInitializationVector(this._iv),this._cek&&r.setContentEncryptionKey(this._cek),this._keyManagementParameters&&r.setKeyManagementParameters(this._keyManagementParameters),r.encrypt(e,t)}}const ht=(e,t)=>{if("string"!=typeof e||!e)throw new O(`${t} missing or invalid`)};async function ft(e,t){if(!Z(e))throw new TypeError("JWK must be an object");if(t??(t="sha256"),"sha256"!==t&&"sha384"!==t&&"sha512"!==t)throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');let r;switch(e.kty){case"EC":ht(e.crv,'"crv" (Curve) Parameter'),ht(e.x,'"x" (X Coordinate) Parameter'),ht(e.y,'"y" (Y Coordinate) Parameter'),r={crv:e.crv,kty:e.kty,x:e.x,y:e.y};break;case"OKP":ht(e.crv,'"crv" (Subtype of Key Pair) Parameter'),ht(e.x,'"x" (Public Key) Parameter'),r={crv:e.crv,kty:e.kty,x:e.x};break;case"RSA":ht(e.e,'"e" (Exponent) Parameter'),ht(e.n,'"n" (Modulus) Parameter'),r={e:e.e,kty:e.kty,n:e.n};break;case"oct":ht(e.k,'"k" (Key Value) Parameter'),r={k:e.k,kty:e.kty};break;default:throw new S('"kty" (Key Type) Parameter missing or unsupported')}const n=c.encode(JSON.stringify(r));return w(await o(t,n))}async function yt(e,t){t??(t="sha256");const r=await ft(e,t);return`urn:ietf:params:oauth:jwk-thumbprint:sha-${t.slice(-3)}:${r}`}async function mt(e,t){const r={...e,...t?.header};if(!Z(r.jwk))throw new P('"jwk" (JSON Web Key) Header Parameter must be a JSON object');const n=await Pe({...r.jwk,ext:!0},r.alg);if(n instanceof Uint8Array||"public"!==n.type)throw new P('"jwk" (JSON Web Key) Header Parameter must be a public key');return n}function wt(e){return e&&"object"==typeof e&&Array.isArray(e.keys)&&e.keys.every(gt)}function gt(e){return Z(e)}class bt{constructor(e){if(this._cached=new WeakMap,!wt(e))throw new H("JSON Web Key Set malformed");var t;this._jwks=(t=e,"function"==typeof structuredClone?structuredClone(t):JSON.parse(JSON.stringify(t)))}async getKey(e,t){const{alg:r,kid:n}={...e,...t?.header},s=function(e){switch("string"==typeof e&&e.slice(0,2)){case"RS":case"PS":return"RSA";case"ES":return"EC";case"Ed":return"OKP";default:throw new S('Unsupported "alg" value for a JSON Web Key Set')}}(r),i=this._jwks.keys.filter((e=>{let t=s===e.kty;if(t&&"string"==typeof n&&(t=n===e.kid),t&&"string"==typeof e.alg&&(t=r===e.alg),t&&"string"==typeof e.use&&(t="sig"===e.use),t&&Array.isArray(e.key_ops)&&(t=e.key_ops.includes("verify")),t&&"EdDSA"===r&&(t="Ed25519"===e.crv||"Ed448"===e.crv),t)switch(r){case"ES256":t="P-256"===e.crv;break;case"ES256K":t="secp256k1"===e.crv;break;case"ES384":t="P-384"===e.crv;break;case"ES512":t="P-521"===e.crv}return t})),{0:a,length:o}=i;if(0===o)throw new R;if(1!==o){const e=new T,{_cached:t}=this;throw e[Symbol.asyncIterator]=async function*(){for(const e of i)try{yield await Et(t,e,r)}catch{}},e}return Et(this._cached,a,r)}}async function Et(e,t,r){const n=e.get(t)||e.set(t,{}).get(t);if(void 0===n[r]){const e=await Pe({...t,ext:!0},r);if(e instanceof Uint8Array||"public"!==e.type)throw new H("JSON Web Key Set members must be public keys");n[r]=e}return n[r]}function _t(e){const t=new bt(e);return async(e,r)=>t.getKey(e,r)}let vt;"undefined"!=typeof navigator&&navigator.userAgent?.startsWith?.("Mozilla/5.0 ")||(vt="jose/v5.2.2");class At extends bt{constructor(e,t){if(super({keys:[]}),this._jwks=void 0,!(e instanceof URL))throw new TypeError("url must be an instance of URL");this._url=new URL(e.href),this._options={agent:t?.agent,headers:t?.headers},this._timeoutDuration="number"==typeof t?.timeoutDuration?t?.timeoutDuration:5e3,this._cooldownDuration="number"==typeof t?.cooldownDuration?t?.cooldownDuration:3e4,this._cacheMaxAge="number"==typeof t?.cacheMaxAge?t?.cacheMaxAge:6e5}coolingDown(){return"number"==typeof this._jwksTimestamp&&Date.now()<this._jwksTimestamp+this._cooldownDuration}fresh(){return"number"==typeof this._jwksTimestamp&&Date.now()<this._jwksTimestamp+this._cacheMaxAge}async getKey(e,t){this._jwks&&this.fresh()||await this.reload();try{return await super.getKey(e,t)}catch(r){if(r instanceof R&&!1===this.coolingDown())return await this.reload(),super.getKey(e,t);throw r}}async reload(){this._pendingFetch&&("undefined"!=typeof WebSocketPair||"undefined"!=typeof navigator&&"Cloudflare-Workers"===navigator.userAgent||"undefined"!=typeof EdgeRuntime&&"vercel"===EdgeRuntime)&&(this._pendingFetch=void 0);const e=new Headers(this._options.headers);vt&&!e.has("User-Agent")&&(e.set("User-Agent",vt),this._options.headers=Object.fromEntries(e.entries())),this._pendingFetch||(this._pendingFetch=(async(e,t,r)=>{let n,s,i=!1;"function"==typeof AbortController&&(n=new AbortController,s=setTimeout((()=>{i=!0,n.abort()}),t));const a=await fetch(e.href,{signal:n?n.signal:void 0,redirect:"manual",headers:r.headers}).catch((e=>{if(i)throw new K;throw e}));if(void 0!==s&&clearTimeout(s),200!==a.status)throw new E("Expected 200 OK from the JSON Web Key Set HTTP response");try{return await a.json()}catch{throw new E("Failed to parse the JSON Web Key Set HTTP response as JSON")}})(this._url,this._timeoutDuration,this._options).then((e=>{if(!wt(e))throw new H("JSON Web Key Set malformed");this._jwks={keys:e.keys},this._jwksTimestamp=Date.now(),this._pendingFetch=void 0})).catch((e=>{throw this._pendingFetch=void 0,e}))),await this._pendingFetch}}function St(e,t){const r=new At(e,t);return async(e,t)=>r.getKey(e,t)}class kt extends pt{encode(){return`${w(JSON.stringify({alg:"none"}))}.${w(JSON.stringify(this._payload))}.`}static decode(e,t){if("string"!=typeof e)throw new C("Unsecured JWT must be a string");const{0:r,1:n,2:s,length:i}=e.split(".");if(3!==i||""!==s)throw new C("Invalid Unsecured JWT");let a;try{if(a=JSON.parse(u.decode(b(r))),"none"!==a.alg)throw new Error}catch{throw new C("Invalid Unsecured JWT")}return{payload:tt(a,b(n),t),header:a}}}const xt=w,Pt=b;function Ct(e){let t;if("string"==typeof e){const r=e.split(".");3!==r.length&&5!==r.length||([t]=r)}else if("object"==typeof e&&e){if(!("protected"in e))throw new TypeError("Token does not contain a Protected Header");t=e.protected}try{if("string"!=typeof t||!t)throw new Error;const e=JSON.parse(u.decode(Pt(t)));if(!Z(e))throw new Error;return e}catch{throw new TypeError("Invalid Token or Protected Header formatting")}}function Ot(e){if("string"!=typeof e)throw new C("JWTs must use Compact JWS serialization, JWT must be a string");const{1:t,length:r}=e.split(".");if(5===r)throw new C("Only JWTs using Compact JWS serialization can be decoded");if(3!==r)throw new C("Invalid JWT");if(!t)throw new C("JWTs must contain a payload");let n,s;try{n=Pt(t)}catch{throw new C("Failed to base64url decode the payload")}try{s=JSON.parse(u.decode(n))}catch{throw new C("Failed to parse the decoded payload as JSON")}if(!Z(s))throw new C("Invalid JWT Claims Set");return s}function Ht(e){const t=e?.modulusLength??2048;if("number"!=typeof t||t<2048)throw new S("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");return t}async function Rt(e,t){return async function(e,t){let r,n;switch(e){case"PS256":case"PS384":case"PS512":r={name:"RSA-PSS",hash:`SHA-${e.slice(-3)}`,publicExponent:new Uint8Array([1,0,1]),modulusLength:Ht(t)},n=["sign","verify"];break;case"RS256":case"RS384":case"RS512":r={name:"RSASSA-PKCS1-v1_5",hash:`SHA-${e.slice(-3)}`,publicExponent:new Uint8Array([1,0,1]),modulusLength:Ht(t)},n=["sign","verify"];break;case"RSA-OAEP":case"RSA-OAEP-256":case"RSA-OAEP-384":case"RSA-OAEP-512":r={name:"RSA-OAEP",hash:`SHA-${parseInt(e.slice(-3),10)||1}`,publicExponent:new Uint8Array([1,0,1]),modulusLength:Ht(t)},n=["decrypt","unwrapKey","encrypt","wrapKey"];break;case"ES256":r={name:"ECDSA",namedCurve:"P-256"},n=["sign","verify"];break;case"ES384":r={name:"ECDSA",namedCurve:"P-384"},n=["sign","verify"];break;case"ES512":r={name:"ECDSA",namedCurve:"P-521"},n=["sign","verify"];break;case"EdDSA":{n=["sign","verify"];const e=t?.crv??"Ed25519";switch(e){case"Ed25519":case"Ed448":r={name:e};break;default:throw new S("Invalid or unsupported crv option provided")}break}case"ECDH-ES":case"ECDH-ES+A128KW":case"ECDH-ES+A192KW":case"ECDH-ES+A256KW":{n=["deriveKey","deriveBits"];const e=t?.crv??"P-256";switch(e){case"P-256":case"P-384":case"P-521":r={name:"ECDH",namedCurve:e};break;case"X25519":case"X448":r={name:e};break;default:throw new S("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448")}break}default:throw new S('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}return i.subtle.generateKey(r,t?.extractable??!1,n)}(e,t)}async function Tt(e,t){return async function(e,t){let r,n,s;switch(e){case"HS256":case"HS384":case"HS512":r=parseInt(e.slice(-3),10),n={name:"HMAC",hash:`SHA-${r}`,length:r},s=["sign","verify"];break;case"A128CBC-HS256":case"A192CBC-HS384":case"A256CBC-HS512":return r=parseInt(e.slice(-3),10),I(new Uint8Array(r>>3));case"A128KW":case"A192KW":case"A256KW":r=parseInt(e.slice(1,4),10),n={name:"AES-KW",length:r},s=["wrapKey","unwrapKey"];break;case"A128GCMKW":case"A192GCMKW":case"A256GCMKW":case"A128GCM":case"A192GCM":case"A256GCM":r=parseInt(e.slice(1,4),10),n={name:"AES-GCM",length:r},s=["encrypt","decrypt"];break;default:throw new S('Invalid or unsupported JWK "alg" (Algorithm) Parameter value')}return i.subtle.generateKey(n,t?.extractable??!1,s)}(e,t)}const Kt="WebCryptoAPI"}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(51)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
